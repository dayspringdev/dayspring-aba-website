==== ./supabase/.temp/storage-version ====
custom-metadata==== ./supabase/.temp/postgres-version ====
17.4.1.054==== ./supabase/.temp/cli-latest ====
v2.31.8==== ./supabase/.temp/pooler-url ====
postgresql://postgres.idmsergkxsuvxvvjoibb:[YOUR-PASSWORD]@aws-0-us-east-2.pooler.supabase.com:6543/postgres==== ./supabase/.temp/project-ref ====
idmsergkxsuvxvvjoibb==== ./supabase/.temp/rest-version ====
v12.2.3==== ./supabase/.temp/gotrue-version ====
v2.177.0==== ./src/types/homepage.ts ====
// FILE: src/types/homepage.ts

import type { Database } from "@/types/supabase";

// Get the specific Profile type from our auto-generated Supabase types
type Profile = Database["public"]["Tables"]["profiles"]["Row"];

// A simple reusable type for sections with a title and description
type TitledListItem = {
  title: string;
  description: string;
};

// A type for the service settings section with icons
type ServiceSetting = {
  icon: "home" | "tv" | "school" | "users"; // We use names to map to icon components later
  text: string;
};

// This is the main interface that defines the entire shape of our homepage content.
// It will be used by both the frontend component and the backend data fetching.
export interface HomePageData {
  profile: Profile | null;
  hero: {
    title: string;
    subtitle: string;
  };
  about: {
    title: string;
    // An array of strings allows for multiple paragraphs in the about section
    body: string[];
  };
  guidingPrinciples: {
    title: string;
    subtitle: string;
    values: TitledListItem[];
  };
  services: {
    title: string;
    subtitle: string;
    list: TitledListItem[];
    settingsTitle: string;
    settings: ServiceSetting[];
  };
  intake: {
    title: string;
    subtitle: string;
    steps: { step: number; title: string; description: string }[];
  };
  faq: {
    title: string;
    questions: { question: string; answer: string }[];
  };
  cta: {
    title: string;
    subtitle: string;
  };
}
==== ./src/types/supabase.ts ====

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instanciate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: "12.2.3 (519615d)"
  }
  graphql_public: {
    Tables: {
      [_ in never]: never
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      graphql: {
        Args: {
          operationName?: string
          query?: string
          variables?: Json
          extensions?: Json
        }
        Returns: Json
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
  public: {
    Tables: {
      availability_overrides: {
        Row: {
          created_at: string
          end_time: string
          id: number
          start_time: string
          type: string
        }
        Insert: {
          created_at?: string
          end_time: string
          id?: number
          start_time: string
          type?: string
        }
        Update: {
          created_at?: string
          end_time?: string
          id?: number
          start_time?: string
          type?: string
        }
        Relationships: []
      }
      bookings: {
        Row: {
          created_at: string
          email: string
          first_name: string
          id: number
          last_name: string
          notes: string | null
          slot_time: string
          status: Database["public"]["Enums"]["booking_status"]
        }
        Insert: {
          created_at?: string
          email: string
          first_name: string
          id?: number
          last_name: string
          notes?: string | null
          slot_time: string
          status?: Database["public"]["Enums"]["booking_status"]
        }
        Update: {
          created_at?: string
          email?: string
          first_name?: string
          id?: number
          last_name?: string
          notes?: string | null
          slot_time?: string
          status?: Database["public"]["Enums"]["booking_status"]
        }
        Relationships: []
      }
      homepage_content: {
        Row: {
          content: Json
          id: number
          updated_at: string | null
        }
        Insert: {
          content: Json
          id?: number
          updated_at?: string | null
        }
        Update: {
          content?: Json
          id?: number
          updated_at?: string | null
        }
        Relationships: []
      }
      profiles: {
        Row: {
          avatar_url: string | null
          full_name: string | null
          id: number
          role_title: string | null
          updated_at: string | null
        }
        Insert: {
          avatar_url?: string | null
          full_name?: string | null
          id?: number
          role_title?: string | null
          updated_at?: string | null
        }
        Update: {
          avatar_url?: string | null
          full_name?: string | null
          id?: number
          role_title?: string | null
          updated_at?: string | null
        }
        Relationships: []
      }
      recurring_availability_rules: {
        Row: {
          available_slots: string[]
          day_of_week: number
          id: number
        }
        Insert: {
          available_slots: string[]
          day_of_week: number
          id?: number
        }
        Update: {
          available_slots?: string[]
          day_of_week?: number
          id?: number
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      booking_status: "pending" | "confirmed" | "cancelled"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  graphql_public: {
    Enums: {},
  },
  public: {
    Enums: {
      booking_status: ["pending", "confirmed", "cancelled"],
    },
  },
} as const
==== ./src/lib/supabase/server.ts ====
// FILE: src/lib/supabase/server.ts

import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { cookies } from "next/headers";
import type { Database } from "@/types/supabase";

export const createClient = () => {
  // --- THE FINAL FIX IS HERE ---
  // We are telling TypeScript to ignore the incorrect Promise type
  // and treat cookieStore as a flexible 'any' type.
  // This is safe because we know at runtime it WILL have .get(), .set(), etc.
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const cookieStore = cookies() as any;

  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
        set(name: string, value: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value, ...options });
          } catch (_error) {
            // The `set` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
        remove(name: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value: "", ...options });
          } catch (_error) {
            // The `delete` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  );
};
==== ./src/lib/supabase/public-server.ts ====
import { createClient } from "@supabase/supabase-js";
import type { Database } from "@/types/supabase";

// This client is for public, server-side data fetching
// where no user session is required.
export const publicSupabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);
==== ./src/lib/supabase/client.ts ====
// FILE: src/lib/supabase/client.ts

import { createBrowserClient } from "@supabase/ssr";
import type { Database } from "@/types/supabase";

// This client is for use in "use client" components
export const createClient = () =>
  createBrowserClient<Database>(
    // --- THESE ARGUMENTS WERE MISSING ---
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
==== ./src/lib/db.ts ====
// FILE: src/lib/db.ts

import {
  startOfDay,
  getDay, // We will use getDay, but on a UTC-adjusted date
  parse,
  isWithinInterval,
  isEqual,
  addHours,
  endOfDay,
  addMinutes, // Import the addMinutes function
} from "date-fns";
import type { Database } from "@/types/supabase";
import type { SupabaseClient } from "@supabase/supabase-js";

export type Booking = Database["public"]["Tables"]["bookings"]["Row"];
export type RecurringRule =
  Database["public"]["Tables"]["recurring_availability_rules"]["Row"];
export type Override =
  Database["public"]["Tables"]["availability_overrides"]["Row"];

/**
 * CORRECTED HELPER: A helper function to get the day of the week in UTC.
 * This prevents timezone mismatches between the client and server.
 * @param date The local date from the client.
 * @returns The UTC day of the week (0 for Sunday, 1 for Monday, etc.).
 */
const getUTCDay = (date: Date): number => {
  // 1. Get the timezone offset in minutes from the provided date.
  const timezoneOffset = date.getTimezoneOffset();
  // 2. Create a new Date object that is adjusted to UTC by adding the offset.
  const utcDate = addMinutes(date, timezoneOffset);
  // 3. Get the day of the week from this new UTC-aligned date.
  return getDay(utcDate);
};

export const getAvailableSlots = async (
  supabase: SupabaseClient<Database>,
  date: Date
): Promise<Date[]> => {
  const bookingLeadTimeHours = 2;
  const now = new Date();
  const earliestBookingTime = addHours(now, bookingLeadTimeHours);

  // Use our new, correct, UTC-safe helper function
  const dayOfWeek = getUTCDay(date);
  const dayStart = startOfDay(date);
  const dayEnd = endOfDay(date);

  const [ruleRes, overridesRes, bookingsRes] = await Promise.all([
    supabase
      .from("recurring_availability_rules")
      .select("available_slots")
      .eq("day_of_week", dayOfWeek)
      .single(),

    supabase
      .from("availability_overrides")
      .select("*")
      .gte("start_time", dayStart.toISOString())
      .lte("end_time", dayEnd.toISOString()),

    supabase
      .from("bookings")
      .select("slot_time")
      .gte("slot_time", dayStart.toISOString())
      .lte("slot_time", dayEnd.toISOString())
      .in("status", ["pending", "confirmed"]),
  ]);

  const rule = ruleRes.data;
  const todaysOverrides = overridesRes.data || [];
  const todaysBookings = bookingsRes.data || [];

  if (!rule || !rule.available_slots || rule.available_slots.length === 0) {
    return [];
  }

  const potentialSlots: Date[] = rule.available_slots.map((timeStr) =>
    parse(timeStr, "HH:mm:ss", dayStart)
  );

  const availableSlots = potentialSlots.filter((slot) => {
    const isAfterLeadTime = slot > earliestBookingTime;
    const isBooked = todaysBookings.some((booking) =>
      isEqual(new Date(booking.slot_time), slot)
    );
    const isOverridden = todaysOverrides.some((override) =>
      isWithinInterval(slot, {
        start: new Date(override.start_time),
        end: new Date(override.end_time),
      })
    );
    return isAfterLeadTime && !isBooked && !isOverridden;
  });

  return availableSlots;
};
==== ./src/lib/utils.ts ====
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
==== ./src/app/(public)/contact/intake/page.tsx ====
// FILE: src/app/(public)/contact/intake/page.tsx
"use client";

import { useState, useEffect, useRef } from "react";
import Link from "next/link";
// --- CHANGE: Import new date-fns functions ---
import {
  format,
  parseISO,
  startOfDay,
  startOfMonth,
  endOfMonth,
  startOfWeek,
  endOfWeek,
} from "date-fns";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";

export default function IntakePage() {
  const [step, setStep] = useState(1);
  const [selectedDate, setSelectedDate] = useState<Date | undefined>();
  const [availableTimes, setAvailableTimes] = useState<string[]>([]);
  const [isLoadingTimes, setIsLoadingTimes] = useState(false);
  const [selectedTime, setSelectedTime] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    notes: "",
  });
  const [error, setError] = useState<string | null>(null);

  const [unavailableDates, setUnavailableDates] = useState<Date[]>([]);
  const [currentMonth, setCurrentMonth] = useState(startOfMonth(new Date()));
  const [isLoadingAvailability, setIsLoadingAvailability] = useState(true);

  const timeListRef = useRef<HTMLDivElement>(null);

  // --- Fetch unavailable dates for the ENTIRE VISIBLE calendar grid ---
  useEffect(() => {
    setIsLoadingAvailability(true);

    // --- CHANGE: Calculate the full visible date range ---
    const firstDayOfMonth = startOfMonth(currentMonth);
    const lastDayOfMonth = endOfMonth(currentMonth);
    // Get the first day of the first week shown (a Sunday)
    const firstDayToFetch = startOfWeek(firstDayOfMonth);
    // Get the last day of the last week shown (a Saturday)
    const lastDayToFetch = endOfWeek(lastDayOfMonth);

    const startParam = firstDayToFetch.toISOString();
    const endParam = lastDayToFetch.toISOString();

    fetch(`/api/availability?start=${startParam}&end=${endParam}`)
      .then((res) => res.json())
      .then((dates: string[]) => {
        const unavailable = dates.map((d) => startOfDay(parseISO(d)));
        setUnavailableDates(unavailable);
      })
      .catch(() => setError("Failed to load calendar availability."))
      .finally(() => setIsLoadingAvailability(false));
  }, [currentMonth]);

  // Fetch available times when a date is selected (no change here)
  useEffect(() => {
    if (selectedDate) {
      setIsLoadingTimes(true);
      setAvailableTimes([]);
      setSelectedTime(null);
      setError(null);
      const dateParam = startOfDay(selectedDate).toISOString();
      fetch(`/api/availability?date=${dateParam}`)
        .then((res) => res.json())
        .then((data) => {
          if (Array.isArray(data)) {
            setAvailableTimes(data);
          }
        })
        .catch(() => setError("Failed to load available times."))
        .finally(() => setIsLoadingTimes(false));
    }
  }, [selectedDate]);

  const handleBookingSubmit = async () => {
    if (!selectedTime) return;
    setError(null);
    try {
      const response = await fetch("/api/bookings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          slotTime: selectedTime,
          clientDetails: { ...formData },
        }),
      });
      if (!response.ok) {
        const { error } = await response.json();
        throw new Error(error || "Failed to create booking.");
      }
      setStep(4);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "An unknown error occurred."
      );
    }
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { id, value } = e.target;
    setFormData((prev) => ({ ...prev, [id]: value }));
  };

  const isDateDisabled = (date: Date) => {
    const today = startOfDay(new Date());
    if (date < today) return true;
    return unavailableDates.some(
      (unavailableDate) =>
        unavailableDate.getTime() === startOfDay(date).getTime()
    );
  };

  const renderStepContent = () => {
    switch (step) {
      case 1:
        const handleWheelScroll = (e: React.WheelEvent<HTMLDivElement>) => {
          e.preventDefault();
          e.stopPropagation();
          const container = timeListRef.current;
          if (container) {
            container.scrollTop += e.deltaY;
          }
        };

        return (
          <Card className="w-full max-w-4xl shadow-none border-muted/20 p-0 gap-0">
            <CardHeader className="pb-2 px-8 pt-6 border-b-1">
              <CardTitle>Step 1: Select a Date & Time</CardTitle>
              <CardDescription>
                Choose a day and time for your consultation. Unavailable days
                are crossed out.
              </CardDescription>
            </CardHeader>
            <CardContent className="relative p-0 md:pr-48 flex justify-around">
              <div className="p-8 ">
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  month={currentMonth}
                  onMonthChange={setCurrentMonth}
                  disabled={isDateDisabled}
                  modifiers={{ unavailable: unavailableDates }}
                  // --- CHANGE: Improved styling for unavailable dates ---
                  modifiersClassNames={{
                    unavailable: "text-foreground/60 line-through",
                  }}
                  className="bg-transparent p-0 [--cell-size:--spacing(10)] md:[--cell-size:--spacing(12)]"
                  footer={
                    isLoadingAvailability ? (
                      <p className="text-center text-sm text-muted-foreground pt-2 animate-pulse">
                        Checking availability...
                      </p>
                    ) : null
                  }
                />
              </div>
              <div
                ref={timeListRef}
                onWheel={handleWheelScroll}
                className="no-scrollbar inset-y-0 right-0 flex max-h-72 w-full scroll-pb-8 flex-col gap-4 overflow-y-auto border-t p-8 md:absolute md:max-h-none md:w-48 md:border-t-0 md:border-l"
              >
                <div className="grid gap-2">
                  {isLoadingTimes && (
                    <p className="text-sm text-muted-foreground animate-pulse">
                      Loading...
                    </p>
                  )}
                  {!isLoadingTimes && !selectedDate && (
                    <p className="text-sm text-muted-foreground">
                      Select a date to see times.
                    </p>
                  )}
                  {!isLoadingTimes &&
                    selectedDate &&
                    availableTimes.length === 0 && (
                      <p className="text-sm text-muted-foreground">
                        No slots available.
                      </p>
                    )}
                  {availableTimes.map((time) => (
                    <Button
                      key={time}
                      variant={selectedTime === time ? "default" : "outline"}
                      onClick={() => setSelectedTime(time)}
                      className="w-full shadow-none"
                    >
                      {format(parseISO(time), "p")}
                    </Button>
                  ))}
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex flex-col items-start gap-4 border-t px-8 !py-5 md:flex-row md:items-center">
              <div className="text-sm">
                {selectedDate && selectedTime ? (
                  <>
                    You are selecting{" "}
                    <span className="font-medium">
                      {format(selectedDate, "PPP")}
                    </span>{" "}
                    at{" "}
                    <span className="font-medium">
                      {format(parseISO(selectedTime), "p")}
                    </span>
                    .
                  </>
                ) : (
                  <>Select a date and time for your meeting.</>
                )}
              </div>
              <Button
                onClick={() => setStep(2)}
                disabled={!selectedDate || !selectedTime}
                className="w-full md:ml-auto md:w-auto"
              >
                Next
              </Button>
            </CardFooter>
          </Card>
        );

      // Other cases (2, 3, 4) remain unchanged
      case 2:
        return (
          <Card className="w-full max-w-lg">
            <CardHeader>
              <CardTitle>Step 2: Your Information</CardTitle>
              <CardDescription>
                Please provide your contact details.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="firstName">First Name</Label>
                  <Input
                    id="firstName"
                    value={formData.firstName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="lastName">Last Name</Label>
                  <Input
                    id="lastName"
                    value={formData.lastName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="notes">Additional Notes</Label>
                <Textarea
                  id="notes"
                  value={formData.notes}
                  onChange={handleInputChange}
                />
              </div>
              {error && <p className="text-sm text-destructive">{error}</p>}
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline" onClick={() => setStep(1)}>
                Back
              </Button>
              <Button
                onClick={() => setStep(3)}
                disabled={
                  !formData.firstName || !formData.lastName || !formData.email
                }
              >
                Review
              </Button>
            </CardFooter>
          </Card>
        );
      case 3:
        return (
          <Card className="w-full max-w-lg">
            <CardHeader>
              <CardTitle>Step 3: Review Your Booking</CardTitle>
              <CardDescription>
                Please confirm the details below.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4 text-sm">
              <p>
                <strong>Date & Time:</strong>{" "}
                {selectedDate && selectedTime
                  ? `${format(selectedDate, "PPPP")} at ${format(
                      parseISO(selectedTime),
                      "p"
                    )}`
                  : ""}
              </p>
              <p>
                <strong>Name:</strong> {formData.firstName} {formData.lastName}
              </p>
              <p>
                <strong>Email:</strong> {formData.email}
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline" onClick={() => setStep(2)}>
                Back
              </Button>
              <Button onClick={handleBookingSubmit}>Submit</Button>
            </CardFooter>
          </Card>
        );
      case 4:
        return (
          <Card className="w-full max-w-lg text-center">
            <CardHeader className="items-center">
              <CardTitle className="text-2xl">Request Sent!</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p>Thank you! Your consultation request has been received.</p>
              <p className="text-muted-foreground">
                You will receive a confirmation email at{" "}
                <strong>{formData.email}</strong> once it has been approved by
                our team.
              </p>
            </CardContent>
            <CardFooter className="justify-center">
              <Link href="/">
                <Button>Back to Home</Button>
              </Link>
            </CardFooter>
          </Card>
        );

      default:
        return null;
    }
  };

  return (
    <div className="w-full py-20 lg:py-24">
      <div className="container mx-auto flex max-w-4xl flex-col items-center justify-center space-y-8 px-4 sm:px-6 lg:px-8">
        <div className="space-y-4 text-center">
          <h1 className="text-4xl font-extrabold tracking-tight">
            Book Your Intake Consultation
          </h1>
          <p className="mx-auto max-w-2xl text-lg text-muted-foreground">
            This initial 15-minute meeting is a crucial first step. We&apos;ll
            discuss your child&apos;s needs, answer your questions, and
            determine the best path forward together.
          </p>
        </div>
        <div className="w-full flex justify-center text-left">
          {renderStepContent()}
        </div>
        {step < 4 && (
          <div>
            <Link href="/contact">
              <Button variant="outline">← Back to General Contact</Button>
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}
==== ./src/app/(public)/contact/page.tsx ====
"use client";

import { useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";

/**
 * A confirmation message component shown after successful form submission.
 * @param onReset A function to reset the form state, allowing another message.
 */
const ConfirmationMessage = ({ onReset }: { onReset: () => void }) => (
  <div className="flex h-full flex-col items-center justify-center space-y-6 rounded-2xl border bg-card p-8 text-center shadow-soft">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="h-16 w-16 text-green-500"
      viewBox="0 0 24 24"
      fill="currentColor"
    >
      <path
        fillRule="evenodd"
        d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z"
        clipRule="evenodd"
      />
    </svg>
    <h2 className="text-2xl font-bold">Thank You!</h2>
    <p className="text-muted-foreground">
      Your message has been sent successfully. We&apos;ll get back to you
      shortly.
    </p>
    <Button onClick={onReset} variant="outline">
      Send Another Message
    </Button>
  </div>
);

export default function ContactPage() {
  const [isSubmitted, setIsSubmitted] = useState(false);

  /**
   * Simulates form submission by preventing the default action and showing a
   * confirmation message after a brief delay.
   * @param e The form event.
   */
  const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // Simulate a network request delay
    setTimeout(() => {
      setIsSubmitted(true);
    }, 1000);
  };

  return (
    <div className="w-full py-20 lg:py-24">
      <div className="container mx-auto grid max-w-7xl grid-cols-1 gap-16 px-4 sm:px-6 md:grid-cols-2 lg:px-8">
        {/* --- CHANGE IS HERE: Conditionally render form or confirmation --- */}
        <div className="flex flex-col justify-center space-y-6">
          {isSubmitted ? (
            <ConfirmationMessage onReset={() => setIsSubmitted(false)} />
          ) : (
            <>
              <div className="space-y-2">
                <h1 className="text-4xl font-extrabold tracking-tight">
                  Connect with Us
                </h1>
                <p className="text-lg text-muted-foreground">
                  Have a question or want to learn more? Fill out the form
                  below, and we&apos;ll get back to you shortly.
                </p>
              </div>

              <form className="space-y-6" onSubmit={handleFormSubmit}>
                <div className="grid grid-cols-1 gap-6 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="first-name">First Name</Label>
                    <Input id="first-name" placeholder="John" required />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="last-name">Last Name</Label>
                    <Input id="last-name" placeholder="Doe" required />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="you@example.com"
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="phone">Phone Number</Label>
                  <Input id="phone" type="tel" placeholder="(123) 456-7890" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="message">Message</Label>
                  <Textarea
                    id="message"
                    placeholder="Your message..."
                    className="min-h-[120px]"
                    required
                  />
                </div>
                <Button type="submit">Send Message</Button>
              </form>

              <div className="pt-4 text-center">
                <p className="text-muted-foreground">
                  Ready to get started?{" "}
                  <Link
                    href="/contact/intake"
                    className="font-semibold text-primary underline-offset-4 hover:underline"
                  >
                    Schedule a free intake consultation.
                  </Link>
                </p>
              </div>
            </>
          )}
        </div>

        {/* Right Column: Image */}
        <div className="relative hidden items-center justify-center md:flex">
          <div className="relative aspect-square w-full max-w-lg overflow-hidden shadow-sm">
            <Image
              src="/unblurimageai_contact-us-hero.jpg"
              alt="A child&#39;s hand reaching out towards an adult&#39;s hand, conveying care and support."
              fill
              className="h-full w-full object-cover"
              priority
            />
            <div className="pointer-events-none absolute inset-0 bg-black/20" />
          </div>
        </div>
      </div>
    </div>
  );
}
==== ./src/app/(public)/layout.tsx ====
// FILE: src/app/(public)/layout.tsx

"use client"; // This must be a client component to use the provider

import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { Toaster } from "sonner";
import { LenisProvider } from "@/context/LenisContext"; // Import the provider

export default function PublicLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    // Wrap the entire layout with LenisProvider
    <LenisProvider>
      <div className="grid min-h-screen grid-rows-[auto_1fr_auto]">
        <Header />
        <main>{children}</main>
        <Footer />
        <Toaster />
      </div>
    </LenisProvider>
  );
}
==== ./src/app/(public)/page.tsx ====
// FILE: src/app/(public)/page.tsx

import { publicSupabase } from "@/lib/supabase/public-server";
import { HomePageContent } from "@/components/HomePageContent";
import type { HomePageData } from "@/types/homepage";

export const revalidate = 60;

export default async function Home() {
  // Fetch both the dynamic profile data AND the main page content
  const [profileRes, contentRes] = await Promise.all([
    publicSupabase.from("profiles").select("*").eq("id", 1).single(),
    publicSupabase
      .from("homepage_content")
      .select("content")
      .eq("id", 1)
      .single(),
  ]);

  // Combine the content from the DB with the dynamic profile data
  // Use optional chaining and nullish coalescing for safety
  const finalContent: HomePageData | null = contentRes.data
    ? {
        ...(contentRes.data.content as Omit<HomePageData, "profile">),
        profile: profileRes.data,
      }
    : null;

  // Render the client component and pass the complete data object as a prop
  return <HomePageContent content={finalContent} />;
}
==== ./src/app/globals.css ====
@import "tailwindcss";

@custom-variant dark (&:is(.dark *));

:root {
  --background-start-rgb: 240, 245, 250; /* A very light blue-gray */
  --background-end-rgb: 255, 255, 255; /* White */
  --foreground: #111827; /* Darker text for better contrast */
  --primary: #0077b6; /* Your original light theme primary color */
  --primary-foreground: #ffffff; /* White for contrast */
  --muted: #4b5563;
  --muted-foreground: #6b7280;
  --card: rgb(255, 255, 255); /* Solid white */
  --card-foreground: #111827;
  /* --- CHANGE IS HERE --- */
  --border: rgba(0, 0, 0, 0.08); /* Reverted to be subtle for cards */
  --input: rgba(0, 0, 0, 0.15); /* Made this darker for input borders */
  --ring: #0077b6; /* Match primary */
  --radius: 0.625rem;
  --background: oklch(1 0 0); /* Keep shadcn's background for compatibility */
  --popover: rgb(255, 255, 255); /* Match card */
  --popover-foreground: #111827;
  --secondary: #6b7280; /* Gray for secondary */
  --secondary-foreground: #ffffff;
  --accent: #e5e7eb; /* Light gray */
  --accent-foreground: #111827;
  --destructive: var(--color-red-700); /* Red for errors */
  --destructive-foreground: #ffffff;
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: #111827;
  --sidebar-primary: #0077b6; /* Match primary */
  --sidebar-primary-foreground: #ffffff;
  --sidebar-accent: #e5e7eb;
  --sidebar-accent-foreground: #111827;
  --sidebar-border: rgba(0, 0, 0, 0.05);
  --sidebar-ring: #0077b6;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background-start-rgb: 17, 24, 39; /* Dark blue-gray */
    --background-end-rgb: 0, 0, 0; /* Black */
    --foreground: #e5e7eb;
    --primary: #48cae4; /* Your original dark theme primary color */
    --primary-foreground: #1e293b; /* Dark for contrast */
    --muted: #9ca3af;
    --muted-foreground: #9ca3af;
    --card: rgba(23, 30, 48, 0.5); /* More transparent dark card */
    --card-foreground: #e5e7eb;
    --border: rgba(255, 255, 255, 0.1);
    --input: rgba(255, 255, 255, 0.1);
    --ring: #48cae4; /* Match primary */
    --background: oklch(0.145 0 0);
    --popover: rgba(23, 30, 48, 0.5); /* Match card */
    --popover-foreground: #e5e7eb;
    --secondary: #9ca3af;
    --secondary-foreground: #1e293b;
    --accent: #4b5563;
    --accent-foreground: #e5e7eb;
    --destructive: #dc2626;
    --destructive-foreground: #ffffff;
    --sidebar: oklch(0.205 0 0);
    --sidebar-foreground: #e5e7eb;
    --sidebar-primary: #48cae4;
    --sidebar-primary-foreground: #1e293b;
    --sidebar-accent: #4b5563;
    --sidebar-accent-foreground: #e5e7eb;
    --sidebar-border: rgba(255, 255, 255, 0.1);
    --sidebar-ring: #48cae4;
  }
}

/* Enable smooth scrolling for anchor links html, */
html {
  scroll-behavior: smooth;
}

body {
  -webkit-overflow-scrolling: touch; /* Good practice for mobile Safari */
  color: var(--foreground);
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
  font-family: var(--font-sans), system-ui, sans-serif;
  min-height: 100vh;
}

/* Typography refinement for headings */
h1,
h2,
h3 {
  letter-spacing: -0.025em;
}

/* Nav Link Animation */
.nav-link {
  position: relative;
  text-decoration: none;
  transition: color 0.3s ease-in-out;
}

.nav-link::after {
  content: "";
  position: absolute;
  width: 100%;
  transform: scaleX(0);
  height: 2px;
  bottom: -4px;
  left: 0;
  background-color: var(--primary);
  transform-origin: bottom left;
  transition: transform 0.3s ease-out;
}

.nav-link:hover::after {
  transform: scaleX(1);
  transform-origin: bottom left;
}

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: #48cae4; /* Match your dark theme primary */
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: #48cae4; /* Match your dark theme primary */
  --sidebar-primary-foreground: oklch(0.205 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/*
  Sonner Toast Overrides
  Themed to match the DBTS color palette.
*/

/* --- SUCCESS (Green) --- */
[data-sonner-toast][data-styled="true"][data-type="success"] {
  background-color: #28a745;
  color: #ffffff;
}

/* --- WARNING (Amber/Yellow) --- */
[data-sonner-toast][data-styled="true"][data-type="warning"] {
  background-color: #ffc107;
  color: var(--muted);
}

/* --- ERROR (Destructive Red) --- */
[data-sonner-toast][data-styled="true"][data-type="error"] {
  background-color: var(--destructive);

  color: var(--destructive-foreground);
}

/* 
  THIS IS THE NEW RULE TO FIX THE DESCRIPTION.
  It targets the description specifically inside an error toast.
*/
[data-sonner-toast][data-type="error"] [data-description] {
  color: var(--destructive-foreground) !important;
}
==== ./src/app/(admin)/login/page.tsx ====
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "sonner"; // <-- For showing error toasts
import { createClient } from "@/lib/supabase/client";

export default function LoginPage() {
  const supabase = createClient();
  const router = useRouter();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);

    // Use the Supabase client to sign in
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    });

    setIsLoading(false);

    if (error) {
      // Show a user-friendly error toast
      toast.error("Login Failed", {
        description: error.message || "Invalid credentials. Please try again.",
      });
    } else {
      // On successful login, Supabase automatically sets a session cookie.
      // We just need to redirect the user to the admin dashboard.
      // The old localStorage logic is no longer needed.
      router.push("/admin");
    }
  };

  return (
    <div className="flex min-h-[80vh] w-full items-center justify-center bg-background/50">
      <Card className="w-full max-w-sm">
        <CardHeader>
          <CardTitle className="text-2xl">Admin Portal</CardTitle>
          <CardDescription>
            Enter your credentials to access the dashboard.
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleLogin}>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="admin@dbtsservices.com"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </CardContent>
          <CardFooter className="flex flex-col gap-4">
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? "Signing In..." : "Sign In"}
            </Button>
            <Button variant="link" asChild className="text-xs">
              <Link href="/">← Go Back Home</Link>
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
}
==== ./src/app/(admin)/admin/content/page.tsx ====
import { ContentEditor } from "@/components/admin/ContentEditor";

export default function ContentPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold tracking-tight">Homepage Content</h1>
      <p className="text-muted-foreground">
        Edit the text and content that appears on your public homepage. Changes
        may take up to a minute to appear live due to caching.
      </p>
      <ContentEditor />
    </div>
  );
}
==== ./src/app/(admin)/admin/availability/page.tsx ====
"use client";

import { useState, useEffect } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardFooter,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox"; // We'll need this for Step 1
import { Label } from "@/components/ui/label"; // And this
import { OverrideManager } from "@/components/admin/OverrideManager";
import { ScheduleSummary } from "@/components/admin/ScheduleSummary"; // <-- Import the new summary component
import type { Database } from "@/types/supabase";
import { toast } from "sonner";
import { ScheduleSkeleton } from "@/components/admin/ScheduleSkeleton";
import { ArrowLeft, ArrowRight } from "lucide-react"; // For navigation

// --- Helper data remains the same ---
const generateTimeSlots = () => {
  const slots = [];
  for (let i = 8; i < 21; i++) {
    slots.push(`${String(i).padStart(2, "0")}:00:00`);
    slots.push(`${String(i).padStart(2, "0")}:30:00`);
  }
  return slots;
};

const allPossibleSlots = generateTimeSlots();

const formatTime = (time: string) => {
  const [hour, minute] = time.split(":");
  const date = new Date();
  date.setHours(parseInt(hour), parseInt(minute));
  return date.toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    hour12: true,
  });
};

const daysOfWeekMap = {
  1: "Monday",
  2: "Tuesday",
  3: "Wednesday",
  4: "Thursday",
  5: "Friday",
  6: "Saturday",
  0: "Sunday",
};

const orderedDaysOfWeek = [1, 2, 3, 4, 5, 6, 0];

type RuleState =
  Database["public"]["Tables"]["recurring_availability_rules"]["Row"];

export default function AvailabilityPage() {
  const [rules, setRules] = useState<RuleState[]>([]);
  const [originalRules, setOriginalRules] = useState<RuleState[]>([]);

  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isEditing, setIsEditing] = useState(false);

  // --- NEW STATE for managing the stepped workflow ---
  const [step, setStep] = useState(1); // 1: Select days, 2: Select times
  const [selectedDays, setSelectedDays] = useState<Set<number>>(new Set());
  const [originalSelectedDays, setOriginalSelectedDays] = useState<Set<number>>(
    new Set()
  );

  const [currentDayIndex, setCurrentDayIndex] = useState(0); // Index for navigating through selectedDays

  const fetchRules = async () => {
    setIsLoading(true);
    try {
      const response = await fetch("/api/admin/availability/rules");
      if (!response.ok) throw new Error("Could not fetch schedule.");
      const data: RuleState[] = await response.json();
      setRules(data);
      setSelectedDays(new Set(data.map((r) => r.day_of_week)));
      setOriginalRules(data);
      setOriginalSelectedDays(new Set(data.map((r) => r.day_of_week)));
    } catch (error) {
      toast.error("Failed to load schedule.");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchRules();
  }, []);

  // --- HANDLERS for the new UI ---
  const handleDayToggle = (dayId: number) => {
    setSelectedDays((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(dayId)) {
        newSet.delete(dayId);
      } else {
        newSet.add(dayId);
      }
      return newSet;
    });
  };

  const handleSlotToggle = (dayId: number, slot: string) => {
    setRules((currentRules) => {
      const dayRule = currentRules.find((r) => r.day_of_week === dayId);
      if (dayRule) {
        const slots = dayRule.available_slots || [];
        const newSlots = slots.includes(slot)
          ? slots.filter((s) => s !== slot)
          : [...slots, slot].sort();
        return currentRules.map((r) =>
          r.day_of_week === dayId ? { ...r, available_slots: newSlots } : r
        );
      } else {
        return [
          ...currentRules,
          { id: Date.now(), day_of_week: dayId, available_slots: [slot] },
        ];
      }
    });
  };

  const proceedToTimeSelection = () => {
    if (selectedDays.size === 0) {
      toast.info("Please select at least one day to set availability.");
      return;
    }
    setCurrentDayIndex(0); // Start with the first selected day
    setStep(2);
  };

  const handleSaveRules = async () => {
    setIsSaving(true);
    // Create rules only for the days the user has explicitly selected in the UI
    const finalRules = Array.from(selectedDays)
      .map((dayId) => {
        const existingRule = rules.find((r) => r.day_of_week === dayId);
        return {
          day_of_week: dayId,
          available_slots: existingRule?.available_slots || [],
        };
      })
      .filter((r) => r.available_slots.length > 0);

    const promise = fetch("/api/admin/availability/rules", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ rules: finalRules }),
    }).then((res) => {
      if (!res.ok) throw new Error("Failed to save schedule");
      fetchRules();
      setIsEditing(false);
    });

    toast.promise(promise, {
      loading: "Saving schedule...",
      success: "Schedule updated successfully!",
      error: (err) => err.message,
      finally: () => setIsSaving(false),
    });
  };

  // --- NEW: Handler to start editing ---
  const handleStartEditing = () => {
    // Save the current state as the "original" state to revert to on cancel
    setOriginalRules(rules);
    setOriginalSelectedDays(selectedDays);
    setIsEditing(true);
    setStep(1); // Always start at step 1
  };

  // --- NEW: Handler for the cancel button ---
  const handleCancelEditing = () => {
    // Revert to the saved original state
    setRules(originalRules);
    setSelectedDays(originalSelectedDays);
    setIsEditing(false);
  };

  // --- DYNAMIC CONTENT RENDERING ---
  const renderContent = () => {
    if (isLoading) return <ScheduleSkeleton />;

    if (isEditing) {
      // STEP 1: DAY SELECTION
      if (step === 1) {
        return (
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              First, choose the days of the week you are generally available.
            </p>
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
              {orderedDaysOfWeek.map((dayId) => (
                <div
                  key={dayId}
                  className="flex items-center space-x-2 rounded-md border p-3"
                >
                  <Checkbox
                    id={`day-${dayId}`}
                    checked={selectedDays.has(dayId)}
                    onCheckedChange={() => handleDayToggle(dayId)}
                  />
                  <Label
                    htmlFor={`day-${dayId}`}
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    {daysOfWeekMap[dayId as keyof typeof daysOfWeekMap]}
                  </Label>
                </div>
              ))}
            </div>
          </div>
        );
      }

      // STEP 2: TIME SELECTION
      if (step === 2) {
        const activeDays = orderedDaysOfWeek.filter((dayId) =>
          selectedDays.has(dayId)
        );
        if (activeDays.length === 0) {
          setStep(1); // Failsafe, go back if no days are selected
          return null;
        }

        const currentDayId = activeDays[currentDayIndex];
        const dayRule = rules.find((r) => r.day_of_week === currentDayId);
        const selectedSlots = new Set(dayRule?.available_slots || []);

        return (
          <div>
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">
                Set times for{" "}
                {daysOfWeekMap[currentDayId as keyof typeof daysOfWeekMap]}
              </h3>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setCurrentDayIndex((prev) => prev - 1)}
                  disabled={currentDayIndex === 0}
                >
                  <ArrowLeft className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setCurrentDayIndex((prev) => prev + 1)}
                  disabled={currentDayIndex === activeDays.length - 1}
                >
                  <ArrowRight className="h-4 w-4" />
                </Button>
              </div>
            </div>

            <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-2">
              {allPossibleSlots.map((slot) => (
                <Button
                  key={slot}
                  variant={selectedSlots.has(slot) ? "default" : "outline"}
                  onClick={() => handleSlotToggle(currentDayId, slot)}
                  className="text-xs h-8"
                >
                  {formatTime(slot)}
                </Button>
              ))}
            </div>
          </div>
        );
      }
    }
    return <ScheduleSummary rules={rules} onEdit={handleStartEditing} />;
  };

  const renderFooter = () => {
    // Hide footer when not editing or loading
    if (!isEditing || isLoading) {
      return null;
    }
    if (step === 1) {
      return (
        <div className="flex w-full justify-between">
          {/* Cancel button on the left */}
          <Button variant="outline" onClick={handleCancelEditing}>
            Cancel
          </Button>
          {/* Next button on the right */}
          <Button className="min-w-24" onClick={proceedToTimeSelection}>
            Next
          </Button>
        </div>
      );
    }
    if (step === 2) {
      return (
        <div className="flex w-full justify-between">
          <Button variant="outline" onClick={() => setStep(1)}>
            Back to Day Selection
          </Button>
          {/* --- NEW: Add a Cancel button next to Save --- */}
          <div className="flex gap-2">
            <Button variant="outline" onClick={handleCancelEditing}>
              Cancel
            </Button>
            <Button onClick={handleSaveRules} disabled={isSaving}>
              {isSaving ? "Saving..." : "Save All Changes"}
            </Button>
          </div>
        </div>
      );
    }
  };

  return (
    <div className="space-y-8">
      <Card className="shadow-none border-foreground/20 px-2 rounded-sm">
        <CardHeader>
          <CardTitle>Recurring Weekly Schedule</CardTitle>
          <CardDescription>
            A two-step process to set your default weekly availability.
          </CardDescription>
        </CardHeader>
        <CardContent>{renderContent()}</CardContent>
        {renderFooter() && (
          <CardFooter className="justify-end border-t pt-6">
            {renderFooter()}
          </CardFooter>
        )}
      </Card>
      <OverrideManager />
    </div>
  );
}
==== ./src/app/(admin)/admin/settings/page.tsx ====
import { UpdatePasswordForm } from "@/components/admin/UpdatePasswordForm";
// import { UpdateProfileForm } from "@/components/admin/UpdateProfileForm"; // <-- Import it

export default function SettingsPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
      <div>
        {/* <UpdateProfileForm /> */}

        <UpdatePasswordForm />
      </div>
    </div>
  );
}
==== ./src/app/(admin)/admin/layout.tsx ====
"use client";

import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import {
  CalendarCheck2,
  LayoutDashboard,
  CalendarClock,
  LogOut,
  Settings,
  Edit,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { createClient } from "@/lib/supabase/client"; // <-- Import the new helper

// --- ADD SETTINGS LINK HERE ---
const navLinks = [
  { href: "/admin", label: "Dashboard", icon: LayoutDashboard },
  { href: "/admin/availability", label: "Availability", icon: CalendarClock },
  { href: "/admin/bookings", label: "Bookings", icon: CalendarCheck2 },
  { href: "/admin/content", label: "Page Content", icon: Edit }, // <-- NEW LINK
  { href: "/admin/settings", label: "Settings", icon: Settings }, // <-- New Link
];

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const supabase = createClient();
  const pathname = usePathname();
  const router = useRouter();

  const handleLogout = async () => {
    await supabase.auth.signOut();
    // After signing out, redirect to the login page
    router.push("/");
  };

  return (
    <div className="flex min-h-screen w-full">
      <aside className="sticky top-0 flex h-screen w-64 flex-col border-r shadow-none border-foreground/20 bg-card p-4">
        <div className="flex-grow">
          <div className="mb-8 flex items-center gap-2">
            <Link href="/" className="flex items-center">
              <span className="text-xl font-bold text-primary">DBTS</span>
            </Link>
            <span className="rounded-md border bg-muted px-2 py-1 text-xs font-medium text-primary-foreground">
              Admin
            </span>
          </div>
          <nav className="flex flex-col space-y-2">
            {navLinks.map((link) => (
              <Link
                key={link.href}
                href={link.href}
                className={cn(
                  "flex items-center gap-3 rounded-md px-6 py-3 text-sm font-medium text-card-foreground/80 transition-colors hover:bg-muted/10 hover:text-card-foreground",
                  pathname === link.href && "bg-primary text-primary-foreground"
                )}
              >
                <link.icon className="h-4 w-4" />
                {link.label}
              </Link>
            ))}
          </nav>
        </div>
        <div>
          <Button
            variant="ghost"
            onClick={handleLogout}
            className="w-full justify-start text-card-foreground/80 hover:bg-muted/50 hover:text-card-foreground"
          >
            <LogOut className="mr-3 h-4 w-4" />
            Log Out
          </Button>
        </div>
      </aside>
      <main className="flex-1 overflow-auto bg-background/50 p-6 lg:p-8">
        {children}
      </main>
    </div>
  );
}
==== ./src/app/(admin)/admin/bookings/page.tsx ====
"use client";

import { useEffect, useState } from "react";
import { format } from "date-fns";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { PlusCircle } from "lucide-react";
import type { Database } from "@/types/supabase"; // <-- Import Supabase DB types
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { RescheduleDialog } from "@/components/admin/RescheduleDialog"; // <-- Import the new dialog
import { NewBookingDialog } from "@/components/admin/NewBookingDialog"; // <-- Import the new dialog

// Use the Supabase 'Row' type for our state
type Booking = Database["public"]["Tables"]["bookings"]["Row"];
type BookingStatus = Database["public"]["Enums"]["booking_status"];

export default function BookingsPage() {
  const [bookings, setBookings] = useState<Booking[]>([]); // <-- Use the new Booking type
  const [isLoading, setIsLoading] = useState(true);
  const [bookingToReschedule, setBookingToReschedule] =
    useState<Booking | null>(null);
  const [isNewBookingDialogOpen, setIsNewBookingDialogOpen] = useState(false);

  const [error, setError] = useState<string | null>(null);
  const fetchBookings = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // This fetch call is now correct because its API route is fixed
      const response = await fetch("/api/admin/bookings");

      if (!response.ok) {
        throw new Error("Failed to fetch bookings.");
      }
      const data = await response.json();
      setBookings(data);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "An unknown error occurred."
      );
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchBookings();
  }, []);

  const handleUpdateStatus = async (
    bookingId: number,
    status: BookingStatus
  ) => {
    const originalBookings = [...bookings];
    // Optimistic UI update
    setBookings((currentBookings) =>
      currentBookings.map((b) => (b.id === bookingId ? { ...b, status } : b))
    );

    const response = await fetch(`/api/admin/bookings/${bookingId}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ status }),
    });

    if (!response.ok) {
      toast.error("Update failed", {
        description: "Could not update booking status.",
      });
      setBookings(originalBookings); // Revert on failure
    } else {
      toast.success(`Booking has been ${status}.`);
    }
  };

  return (
    <>
      <Card className="shadow-none border-muted/20">
        <CardHeader className="flex flex-row items-center justify-between">
          <div className="space-y-1">
            <CardTitle>Manage Bookings</CardTitle>
            <CardDescription>
              View, confirm, or reschedule upcoming appointments.
            </CardDescription>
          </div>
          {/* --- NEW: "New Appointment" button --- */}
          <Button onClick={() => setIsNewBookingDialogOpen(true)}>
            <PlusCircle className="mr-2 h-4 w-4" />
            New Appointment
          </Button>
        </CardHeader>
        <CardContent>
          {isLoading && <p>Loading bookings...</p>}
          {error && <p className="text-destructive">{error}</p>}
          {!isLoading && !error && (
            <Table>
              <TableHeader>
                <TableRow className="hover:bg-transparent">
                  <TableHead>Client</TableHead>
                  <TableHead>Date & Time</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {bookings.length > 0 ? (
                  bookings.map((booking) => (
                    <TableRow
                      key={booking.id}
                      className="hover:bg-transparent cursor-default"
                    >
                      <TableCell>
                        <div className="font-medium">
                          {booking.first_name} {booking.last_name}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {booking.email}
                        </div>
                      </TableCell>
                      <TableCell>
                        {format(new Date(booking.slot_time), "PPP, p")}
                      </TableCell>
                      <TableCell>
                        <div className="text-sm text-muted-foreground">
                          {booking.status}
                        </div>
                      </TableCell>
                      <TableCell className="text-right">
                        {booking.status === "pending" && (
                          <div className="flex gap-2 justify-end">
                            <Button
                              size="sm"
                              onClick={() =>
                                handleUpdateStatus(booking.id, "confirmed")
                              }
                            >
                              Confirm
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() =>
                                handleUpdateStatus(booking.id, "cancelled")
                              }
                            >
                              Decline
                            </Button>
                          </div>
                        )}
                        {booking.status === "confirmed" && (
                          <div className="flex gap-2 justify-end">
                            <Button
                              size="sm"
                              variant="outline"
                              className="cursor-pointer"
                              onClick={() => setBookingToReschedule(booking)}
                            >
                              Reschedule
                            </Button>
                            <Button
                              size="sm"
                              variant="destructive"
                              className="cursor-pointer"
                              onClick={() =>
                                handleUpdateStatus(booking.id, "cancelled")
                              }
                            >
                              Cancel
                            </Button>
                          </div>
                        )}
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center">
                      No upcoming bookings found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
      {/* --- NEW: Render the Dialog component --- */}
      <RescheduleDialog
        booking={bookingToReschedule}
        open={!!bookingToReschedule}
        onOpenChange={(open) => !open && setBookingToReschedule(null)}
        onRescheduled={() => {
          setBookingToReschedule(null);
          fetchBookings(); // Refresh the list after rescheduling
        }}
      />
      {/* --- NEW: Render the New Booking Dialog --- */}
      <NewBookingDialog
        open={isNewBookingDialogOpen}
        onOpenChange={setIsNewBookingDialogOpen}
        onBookingCreated={() => {
          fetchBookings(); // Refresh the list after a new booking is created
        }}
      />
    </>
  );
}
==== ./src/app/(admin)/admin/page.tsx ====
import Link from "next/link";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

export default function AdminDashboardPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold tracking-tight">Admin Dashboard</h1>
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
        <Card className="shadow-none border-muted/20">
          <CardHeader>
            <CardTitle>Manage Your Availability</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="mb-4 text-muted-foreground">
              Set the dates and times you are available for new intake
              consultations.
            </p>
            <Button asChild>
              <Link href="/admin/availability">Go to Availability</Link>
            </Button>
          </CardContent>
        </Card>
        <Card className="shadow-none border-muted/20">
          <CardHeader>
            <CardTitle>View Upcoming Bookings</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="mb-4 text-muted-foreground">
              See a list of all scheduled consultations with clients.
            </p>
            <Button asChild>
              <Link href="/admin/bookings">Go to Bookings</Link>
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
==== ./src/app/(admin)/layout.tsx ====
// This layout wraps all admin-related pages.

import { Toaster } from "sonner";

// It does NOT add a Header or Footer.
export default function AdminRootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      {children}
      <Toaster />
    </>
  );
}
==== ./src/app/layout.tsx ====
import type { Metadata } from "next";
import { Poppins } from "next/font/google";
import "./globals.css";

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700", "800"],
  variable: "--font-sans",
  display: "swap",
});

export const metadata: Metadata = {
  title: "DBTS - Dayspring Behavioural Therapeutic Services",
  description: "Compassionate, evidence-based therapy and behavioral services.",
};

// This is the one true Root Layout. It wraps every page.
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${poppins.variable} font-sans antialiased`}>
        {children}
      </body>
    </html>
  );
}
==== ./src/app/api/admin/availability/route.ts ====
import { NextRequest, NextResponse } from "next/server";
import { parseISO } from "date-fns";
import { getAvailableSlots } from "@/lib/db";
import { createClient } from "@/lib/supabase/server"; // <-- Import the correct server client helper

/**
 * @route GET /api/availability
 * @description Get all available slots for a specific date using dynamic rules.
 */
export async function GET(request: NextRequest) {
  const supabase = createClient();
  const searchParams = request.nextUrl.searchParams;
  const dateParam = searchParams.get("date");

  if (!dateParam) {
    return NextResponse.json(
      { error: "Date parameter is required" },
      { status: 400 }
    );
  }

  try {
    const requestedDate = parseISO(dateParam);
    const slots = await getAvailableSlots(supabase, requestedDate);
    return NextResponse.json(slots.map((s) => s.toISOString()));
  } catch (error) {
    return NextResponse.json(
      { error: `Invalid date format. Details ${error}` },
      { status: 400 }
    );
  }
}

/**
 * @route POST /api/availability
 * @description (Admin Only) This endpoint is now used conceptually by the admin routes.
 * In a real app, this might be split or protected. For now, it's unused directly.
 * The specific admin logic is in /api/admin/*.
 */
// --- FIX IS HERE ---
// The original POST functionality is now handled by the specific admin routes.
// We can leave a placeholder or remove it, but we won't import from a non-existent file.
// For simplicity, we'll assume no general POST route is needed here anymore.
==== ./src/app/api/admin/availability/overrides/batch/route.ts ====
// FILE: src/app/api/admin/availability/overrides/batch/route.ts

import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server"; // <-- Import the correct server client helper

import type { Database } from "@/types/supabase";

type NewOverride =
  Database["public"]["Tables"]["availability_overrides"]["Insert"];

export async function POST(request: NextRequest) {
  const supabase = createClient();
  try {
    const { overridesToAdd, idsToDelete } = (await request.json()) as {
      overridesToAdd: NewOverride[];
      idsToDelete: number[];
    };

    // We can run these operations in parallel for efficiency
    const [deleteResult, insertResult] = await Promise.all([
      // Delete operation
      supabase.from("availability_overrides").delete().in("id", idsToDelete),
      // Insert operation
      supabase.from("availability_overrides").insert(overridesToAdd),
    ]);

    if (deleteResult.error) {
      console.error("Batch delete error:", deleteResult.error);
      throw new Error("Failed to delete one or more overrides.");
    }

    if (insertResult.error) {
      console.error("Batch insert error:", insertResult.error);
      throw new Error("Failed to add one or more new overrides.");
    }

    return NextResponse.json({ message: "Overrides updated successfully!" });
  } catch (error) {
    const message =
      error instanceof Error ? error.message : "An unknown error occurred.";
    return NextResponse.json(
      { error: `Batch update failed: ${message}` },
      { status: 500 }
    );
  }
}
==== ./src/app/api/admin/availability/overrides/route.ts ====
// FILE: src/app/api/admin/availability/overrides/route.ts

import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";

/**
 * @route   GET /api/admin/availability/overrides
 * @desc    Retrieves all upcoming overrides from Supabase, sorted by date.
 */
export async function GET() {
  const supabase = createClient();
  const today = new Date().toISOString();

  const { data, error } = await supabase
    .from("availability_overrides")
    .select("*")
    .gte("start_time", today) // Only get overrides from today onwards
    .order("start_time", { ascending: true });

  if (error) {
    console.error("Error fetching overrides:", error);
    return NextResponse.json(
      { error: "Failed to fetch overrides." },
      { status: 500 }
    );
  }

  return NextResponse.json(data);
}

/**
 * @route   POST /api/admin/availability/overrides
 * @desc    Adds a new "BLOCKED" override to Supabase.
 */
export async function POST(request: NextRequest) {
  const supabase = createClient();
  try {
    const body = await request.json();
    // Supabase client can accept ISO date strings directly for timestamptz columns
    const { startTime, endTime } = body as {
      startTime: string;
      endTime: string;
    };

    if (!startTime || !endTime) {
      return NextResponse.json(
        { error: "startTime and endTime are required." },
        { status: 400 }
      );
    }

    const { data: newOverride, error } = await supabase
      .from("availability_overrides")
      .insert({
        start_time: startTime,
        end_time: endTime,
        type: "BLOCKED", // This matches your table's default, but it's good to be explicit
      })
      .select()
      .single(); // .single() is great for getting back the one row you just inserted

    if (error) {
      console.error("Error creating override:", error);
      throw new Error("Database operation failed.");
    }

    return NextResponse.json(newOverride, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { error: `Failed to create override. Details: ${error}` },
      { status: 500 }
    );
  }
}

/**
 * @route   DELETE /api/admin/availability/overrides
 * @desc    Deletes a specific override from Supabase by its ID.
 */
export async function DELETE(request: NextRequest) {
  const supabase = createClient();
  try {
    const id = request.nextUrl.searchParams.get("id");
    if (!id) {
      return NextResponse.json(
        { error: "Override ID is required" },
        { status: 400 }
      );
    }

    const { error } = await supabase
      .from("availability_overrides")
      .delete()
      .eq("id", parseInt(id, 10));

    if (error) {
      // This can happen if the row doesn't exist, but we'll treat it as an error for now
      console.error("Error deleting override:", error);
      return NextResponse.json(
        { error: "Override not found or could not be deleted" },
        { status: 404 }
      );
    }

    return NextResponse.json({ message: "Override deleted successfully" });
  } catch (error) {
    return NextResponse.json(
      { error: `Failed to delete override. Details ${error}` },
      { status: 500 }
    );
  }
}
==== ./src/app/api/admin/availability/rules/route.ts ====
// FILE: src/app/api/admin/availability/rules/route.ts

import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import type { Database } from "@/types/supabase";

type NewRule =
  Database["public"]["Tables"]["recurring_availability_rules"]["Insert"];

export async function GET() {
  const supabase = createClient();
  const { data, error } = await supabase
    .from("recurring_availability_rules")
    .select("*");

  if (error) {
    console.error("Error fetching recurring rules:", error);
    return NextResponse.json(
      { error: "Failed to fetch recurring rules." },
      { status: 500 }
    );
  }
  return NextResponse.json(data);
}

export async function POST(request: NextRequest) {
  const supabase = createClient();
  try {
    const { rules } = (await request.json()) as { rules: NewRule[] };

    if (!rules || !Array.isArray(rules)) {
      return NextResponse.json(
        { error: "A 'rules' array is required." },
        { status: 400 }
      );
    }

    // Clear the existing schedule
    const { error: deleteError } = await supabase
      .from("recurring_availability_rules")
      .delete()
      .neq("id", -1); // A trick to delete all rows

    if (deleteError) throw deleteError;

    // If there are new rules to insert, do it
    if (rules.length > 0) {
      // We only need day_of_week and available_slots for the insert
      const rulesToInsert = rules.map((r) => ({
        day_of_week: r.day_of_week,
        available_slots: r.available_slots,
      }));

      const { error: insertError } = await supabase
        .from("recurring_availability_rules")
        .insert(rulesToInsert);

      if (insertError) throw insertError;
    }

    return NextResponse.json({ message: "Schedule updated successfully" });
  } catch (error) {
    const message =
      error instanceof Error ? error.message : "An error occurred";
    return NextResponse.json(
      { error: `Failed to save rules: ${message}` },
      { status: 500 }
    );
  }
}
==== ./src/app/api/admin/settings/password/route.ts ====
// FILE: src/app/api/admin/settings/password/route.ts

// import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { createClient } from "@/lib/supabase/server";
import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  const { newPassword, confirmPassword } = await request.json();

  // Basic validation
  if (newPassword.length < 8) {
    return NextResponse.json(
      { error: "New password must be at least 8 characters long." },
      { status: 400 }
    );
  }

  if (newPassword !== confirmPassword) {
    return NextResponse.json(
      { error: "New passwords do not match." },
      { status: 400 }
    );
  }

  // Create our consistent server client
  const supabase = createClient();

  // Get the currently authenticated user (the API is slightly different)
  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    return NextResponse.json({ error: "Not authenticated" }, { status: 401 });
  }

  // Use the updateUser method to change the password
  const { error } = await supabase.auth.updateUser({
    password: newPassword,
  });

  if (error) {
    console.error("Password update error:", error);
    return NextResponse.json(
      { error: error.message || "Failed to update password." },
      { status: 500 }
    );
  }

  return NextResponse.json({ message: "Password updated successfully!" });
}
==== ./src/app/api/admin/bookings/route.ts ====
// FILE: src/app/api/admin/bookings/route.ts

import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server"; // <-- Import the correct server client helper

/**
 * @route   GET /api/admin/bookings
 * @desc    Retrieves a list of all upcoming bookings for the admin dashboard.
 */
export async function GET() {
  const supabase = createClient(); // <-- Create client for THIS request

  const now = new Date().toISOString();

  // Fetch all bookings from today onwards from the 'bookings' table in Supabase
  const { data: bookings, error } = await supabase
    .from("bookings")
    .select("*")
    .gte("slot_time", now) // Only get bookings from now into the future
    .order("slot_time", { ascending: true }); // Sort them by the soonest first

  if (error) {
    console.error("Error fetching admin bookings:", error);
    return NextResponse.json(
      { error: "Failed to fetch bookings." },
      { status: 500 }
    );
  }

  // If successful, return the data fetched from Supabase
  return NextResponse.json(bookings);
}
==== ./src/app/api/admin/bookings/[id]/route.ts ====
// FILE: src/app/api/admin/bookings/[id]/route.ts
import { createClient } from "@/lib/supabase/server";
import { getAvailableSlots } from "@/lib/db"; // <-- Import core logic
import { NextRequest, NextResponse } from "next/server";
import { parseISO } from "date-fns";

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const supabase = createClient();
  const { id } = params;
  const { status, newSlotTime } = await request.json(); // <-- Check for newSlotTime

  const bookingId = parseInt(id, 10);
  if (isNaN(bookingId)) {
    return NextResponse.json({ error: "Invalid booking ID." }, { status: 400 });
  }

  // --- LOGIC FOR STATUS UPDATE ---
  if (status) {
    if (!["confirmed", "cancelled"].includes(status)) {
      return NextResponse.json(
        { error: "Invalid status provided." },
        { status: 400 }
      );
    }
    const { data, error } = await supabase
      .from("bookings")
      .update({ status: status })
      .eq("id", bookingId)
      .select()
      .single();

    if (error) {
      return NextResponse.json(
        { error: "Failed to update status." },
        { status: 500 }
      );
    }
    return NextResponse.json(data);
  }

  // --- NEW LOGIC FOR RESCHEDULING ---
  if (newSlotTime) {
    const requestedSlot = parseISO(newSlotTime);

    // Validate that the new slot is actually available
    const availableSlots = await getAvailableSlots(supabase, requestedSlot);
    const isStillAvailable = availableSlots.some(
      (s) => s.getTime() === requestedSlot.getTime()
    );

    if (!isStillAvailable) {
      return NextResponse.json(
        { error: "This time slot is not available for rescheduling." },
        { status: 409 } // 409 Conflict
      );
    }

    // If available, update the booking's time and set status to 'confirmed'
    const { data, error } = await supabase
      .from("bookings")
      .update({ slot_time: newSlotTime, status: "confirmed" })
      .eq("id", bookingId)
      .select()
      .single();

    if (error) {
      return NextResponse.json(
        { error: "Failed to reschedule booking." },
        { status: 500 }
      );
    }
    return NextResponse.json(data);
  }

  return NextResponse.json({ error: "Invalid request body." }, { status: 400 });
}
==== ./src/app/api/availability/route.ts ====
// FILE: src/app/api/availability/route.ts

import { NextRequest, NextResponse } from "next/server";
import { parseISO, eachDayOfInterval, startOfDay } from "date-fns";
import { getAvailableSlots } from "@/lib/db";
import { publicSupabase } from "@/lib/supabase/public-server";

export async function GET(request: NextRequest) {
  const { searchParams } = request.nextUrl;
  const dateParam = searchParams.get("date");
  const startParam = searchParams.get("start");
  const endParam = searchParams.get("end");

  // --- LOGIC FOR A SINGLE DAY'S SLOTS (original functionality) ---
  if (dateParam) {
    try {
      const requestedDate = parseISO(dateParam);
      const slots = await getAvailableSlots(publicSupabase, requestedDate);
      return NextResponse.json(slots.map((s) => s.toISOString()));
    } catch (error) {
      return NextResponse.json(
        { error: `Invalid date format provided. Details ${error}` },
        { status: 400 }
      );
    }
  }

  // --- NEW LOGIC FOR A DATE RANGE'S UNAVAILABILITY ---
  if (startParam && endParam) {
    try {
      const startDate = parseISO(startParam);
      const endDate = parseISO(endParam);
      const interval = { start: startDate, end: endDate };

      const daysInInterval = eachDayOfInterval(interval);
      const today = startOfDay(new Date());

      const availabilityChecks = daysInInterval.map(async (day) => {
        // Treat past days as unavailable automatically
        if (day < today) {
          return { date: day.toISOString(), isUnavailable: true };
        }
        const slots = await getAvailableSlots(publicSupabase, day);
        return { date: day.toISOString(), isUnavailable: slots.length === 0 };
      });

      const results = await Promise.all(availabilityChecks);
      const finalUnavailableDates = results
        .filter((r) => r.isUnavailable)
        .map((r) => r.date);

      return NextResponse.json(finalUnavailableDates);
    } catch (error) {
      return NextResponse.json(
        { error: "Invalid date format for range." },
        { status: 400 }
      );
    }
  }

  // --- Fallback if neither condition is met ---
  return NextResponse.json(
    {
      error: "A 'date' parameter or 'start' and 'end' parameters are required",
    },
    { status: 400 }
  );
}
==== ./src/app/api/bookings/route.ts ====
// FILE: src/app/api/bookings/route.ts

import { NextRequest, NextResponse } from "next/server";
import { parseISO } from "date-fns";
import { getAvailableSlots } from "@/lib/db"; // <-- Re-use the same logic!
import { createClient } from "@/lib/supabase/server"; // <-- Import server client

export async function POST(request: NextRequest) {
  const supabase = createClient(); // <-- Create a context-aware server client

  try {
    const {
      data: { user },
    } = await supabase.auth.getUser();

    // If a user is found, they are an admin. Otherwise, it's a public user.
    const isAdminBooking = !!user;
    const body = await request.json();
    const { slotTime, clientDetails } = body as {
      slotTime: string;
      clientDetails: {
        firstName: string;
        lastName: string;
        email: string;
        notes?: string;
      };
    };

    if (
      !slotTime ||
      !clientDetails?.firstName ||
      !clientDetails?.lastName ||
      !clientDetails?.email
    ) {
      return NextResponse.json(
        { error: "slotTime and complete clientDetails are required" },
        { status: 400 }
      );
    }

    const requestedSlot = parseISO(slotTime);

    // --- CRUCIAL VALIDATION STEP using our new function ---
    const availableSlots = await getAvailableSlots(supabase, requestedSlot);
    const isStillAvailable = availableSlots.some(
      (s) => s.getTime() === requestedSlot.getTime()
    );

    if (!isStillAvailable) {
      return NextResponse.json(
        {
          error:
            "This time slot is no longer available. Please select another time.",
        },
        { status: 409 } // 409 Conflict
      );
    }

    // --- If validation passes, create the booking in Supabase ---
    const { data: newBooking, error } = await supabase
      .from("bookings")
      .insert({
        slot_time: requestedSlot.toISOString(),
        first_name: body.clientDetails.firstName,
        last_name: body.clientDetails.lastName,
        email: body.clientDetails.email,
        notes: body.clientDetails.notes || null,
        // --- THIS IS THE NEW LOGIC ---
        // If an admin is booking, confirm it immediately. Otherwise, it's pending.
        status: isAdminBooking ? "confirmed" : "pending",
      })
      .select()
      .single();

    if (error) {
      throw new Error("Could not create booking in the database.");
    }

    return NextResponse.json(newBooking, { status: 201 });
  } catch (error) {
    const message =
      error instanceof Error ? error.message : "An unexpected error occurred.";
    return NextResponse.json(
      {
        error: `An unexpected error occurred while creating the booking: ${message}`,
      },
      { status: 500 }
    );
  }
}
==== ./src/middleware.ts ====
// FILE: ./middleware.ts
import { createServerClient } from "@supabase/ssr";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export async function middleware(req: NextRequest) {
  // We need to create a response object that we can modify
  const res = NextResponse.next();

  // Create a Supabase client that can be used in Middleware
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return req.cookies.get(name)?.value;
        },
        set(name: string, value: string, options) {
          res.cookies.set({ name, value, ...options });
        },
        remove(name: string, options) {
          res.cookies.set({ name, value: "", ...options });
        },
      },
    }
  );

  // The crucial step: get the session from the request cookies
  const {
    data: { session },
  } = await supabase.auth.getSession();

  // If there's no session and the user is trying to access a protected route
  if (!session && req.nextUrl.pathname.startsWith("/admin")) {
    // Redirect them to the login page
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // If there IS a session and the user tries to go to the login page
  if (session && req.nextUrl.pathname === "/login") {
    // Redirect them to the admin dashboard
    return NextResponse.redirect(new URL("/admin", req.url));
  }

  // If all checks pass, allow the request to continue
  return res;
}

// Ensure the middleware runs only on the routes we care about
export const config = {
  matcher: ["/admin/:path*", "/login"],
};
==== ./src/components/admin/ScheduleSummary.tsx ====
import { Button } from "@/components/ui/button";
import type { Database } from "@/types/supabase";

type Rule = Database["public"]["Tables"]["recurring_availability_rules"]["Row"];

const daysOrder = [1, 2, 3, 4, 5, 6, 0]; // Mon, Tue, Wed, Thu, Fri, Sat, Sun
const dayLabels: { [key: number]: string } = {
  1: "Monday",
  2: "Tuesday",
  3: "Wednesday",
  4: "Thursday",
  5: "Friday",
  6: "Saturday",
  0: "Sunday",
};

const formatTime = (time: string) => {
  const [hour, minute] = time.split(":");
  const date = new Date();
  date.setHours(parseInt(hour), parseInt(minute));
  return date.toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    hour12: true,
  });
};

interface ScheduleSummaryProps {
  rules: Rule[];
  onEdit: () => void;
}

export function ScheduleSummary({ rules, onEdit }: ScheduleSummaryProps) {
  const rulesByDay = new Map(rules.map((rule) => [rule.day_of_week, rule]));

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <p className="text-sm text-muted-foreground">
          This is your current live weekly schedule.
        </p>
        <Button className="" onClick={onEdit}>
          Edit Schedule
        </Button>
      </div>
      <div className="space-y-4">
        {daysOrder.map((dayId) => {
          const rule = rulesByDay.get(dayId);
          if (
            !rule ||
            !rule.available_slots ||
            rule.available_slots.length === 0
          ) {
            return (
              <div
                key={dayId}
                className="flex items-center gap-4 rounded-md border p-4"
              >
                <p className="font-medium w-24">{dayLabels[dayId]}</p>
                <p className="text-sm text-muted-foreground">Unavailable</p>
              </div>
            );
          }

          return (
            <div
              key={dayId}
              className="flex flex-col sm:flex-row sm:items-start gap-4 rounded-md border border-foreground/20 p-4"
            >
              <p className="font-medium w-24 shrink-0">{dayLabels[dayId]}</p>
              <div className="flex flex-wrap gap-2">
                {rule.available_slots.map((slot) => (
                  <div
                    key={slot}
                    className="text-xs font-medium justify-center flex items-center bg-primary rounded-xs w-28 h-10 text-primary-foreground px-4 py-2 cursor-default"
                  >
                    {formatTime(slot)}
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}
==== ./src/components/admin/RescheduleDialog.tsx ====
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Calendar } from "@/components/ui/calendar";
import { format, parseISO, startOfDay, addDays, isPast } from "date-fns";
import { toast } from "sonner";
import type { Database } from "@/types/supabase";

type Booking = Database["public"]["Tables"]["bookings"]["Row"];

interface RescheduleDialogProps {
  booking: Booking | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onRescheduled: () => void;
}

export function RescheduleDialog({
  booking,
  open,
  onOpenChange,
  onRescheduled,
}: RescheduleDialogProps) {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>();
  const [availableTimes, setAvailableTimes] = useState<string[]>([]);
  const [isLoadingTimes, setIsLoadingTimes] = useState(false);
  const [selectedTime, setSelectedTime] = useState<string | null>(null);

  // Effect to fetch available times when a new date is selected
  useEffect(() => {
    if (selectedDate) {
      setIsLoadingTimes(true);
      setAvailableTimes([]);
      setSelectedTime(null);
      const dateParam = startOfDay(selectedDate).toISOString();
      fetch(`/api/availability?date=${dateParam}`)
        .then((res) => res.json())
        .then((data) => {
          if (Array.isArray(data)) {
            setAvailableTimes(data);
          }
        })
        .finally(() => setIsLoadingTimes(false));
    }
  }, [selectedDate]);

  // Set initial date when the dialog opens
  useEffect(() => {
    if (open && booking) {
      // When the dialog opens, check the original booking's date
      const originalDate = startOfDay(new Date(booking.slot_time));

      // If the original booking date is in the past...
      if (isPast(originalDate)) {
        // ...default to tomorrow.
        setSelectedDate(addDays(new Date(), 1));
      } else {
        // ...otherwise, default to the original date.
        setSelectedDate(originalDate);
      }
    } else {
      // When it closes, clear everything out
      setSelectedDate(undefined);
      setAvailableTimes([]);
      setSelectedTime(null);
    }
  }, [open, booking]);

  const handleConfirmReschedule = async () => {
    if (!booking || !selectedTime) return;

    const promise = fetch(`/api/admin/bookings/${booking.id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ newSlotTime: selectedTime }),
    }).then((res) => {
      if (!res.ok) {
        // Try to get a more specific error message from the API
        return res.json().then((err) => {
          throw new Error(err.error || "Failed to reschedule.");
        });
      }
      return res.json();
    });

    toast.promise(promise, {
      loading: "Rescheduling appointment...",
      success: () => {
        onRescheduled();
        return "Appointment rescheduled successfully!";
      },
      error: (err) => err.message, // Display the specific error message
    });
  };

  if (!booking) return null;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[625px]">
        <DialogHeader>
          <DialogTitle>Reschedule Appointment</DialogTitle>
          <DialogDescription>
            Select a new date and time for {booking.first_name}{" "}
            {booking.last_name}.
          </DialogDescription>
        </DialogHeader>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
          <div className="flex justify-center">
            <Calendar
              mode="single"
              selected={selectedDate}
              onSelect={setSelectedDate}
              disabled={(date) => date < startOfDay(new Date())}
            />
          </div>
          <div className="space-y-2">
            <p className="text-sm font-medium">
              Available Times for{" "}
              {selectedDate ? format(selectedDate, "PPP") : "a selected date"}
            </p>
            <div className="grid grid-cols-3 gap-2 max-h-64 overflow-y-auto pr-2">
              {isLoadingTimes && (
                <p className="col-span-3 text-sm text-muted-foreground animate-pulse">
                  Loading...
                </p>
              )}
              {!isLoadingTimes &&
                availableTimes.length === 0 &&
                selectedDate && (
                  <p className="col-span-3 text-sm text-muted-foreground">
                    No available slots.
                  </p>
                )}
              {availableTimes.map((time) => (
                <Button
                  key={time}
                  variant={selectedTime === time ? "default" : "outline"}
                  onClick={() => setSelectedTime(time)}
                >
                  {format(parseISO(time), "p")}
                </Button>
              ))}
            </div>
          </div>
        </div>
        <DialogFooter>
          <Button
            type="button"
            variant="outline"
            onClick={() => onOpenChange(false)}
          >
            Cancel
          </Button>
          <Button
            type="button"
            onClick={handleConfirmReschedule}
            disabled={!selectedTime || isLoadingTimes}
          >
            Confirm Reschedule
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
==== ./src/components/admin/UpdateProfileForm.tsx ====
"use client";

import { useState, useEffect, useCallback } from "react";
import { createClient } from "@/lib/supabase/client";
import type { Database } from "@/types/supabase";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import Image from "next/image";
import { Skeleton } from "../ui/skeleton";

type Profile = Database["public"]["Tables"]["profiles"]["Row"];

export function UpdateProfileForm() {
  const supabase = createClient();
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);

  // A single function to fetch the profile data
  const fetchProfile = useCallback(async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from("profiles")
      .select("*")
      .eq("id", 1)
      .single();

    if (error) {
      toast.error("Failed to load profile", { description: error.message });
    }
    setProfile(data);
    setLoading(false);
  }, [supabase]); // Its only dependency is supabase

  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]); // The ESLint warning will now be gone

  const handleUpdateProfile = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!profile) return;
    setLoading(true);

    const { error } = await supabase
      .from("profiles")
      .update({
        full_name: profile.full_name,
        role_title: profile.role_title,
        updated_at: new Date().toISOString(), // Good practice to update a timestamp
      })
      .eq("id", 1); // Always update the row where id is 1

    if (error) {
      toast.error("Update failed", { description: error.message });
    } else {
      toast.success("Profile updated successfully!");
    }
    setLoading(false);
  };

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;

    const file = e.target.files[0];
    const fileExt = file.name.split(".").pop();
    // Use a consistent name for the avatar to overwrite it, or a random one to keep old ones
    const filePath = `public-avatar.${fileExt}`;

    setUploading(true);
    const { error: uploadError } = await supabase.storage
      .from("profile-images")
      .upload(filePath, file, { upsert: true }); // upsert overwrites the old image

    if (uploadError) {
      toast.error("Upload failed", { description: uploadError.message });
      setUploading(false);
      return;
    }

    const {
      data: { publicUrl },
    } = supabase.storage.from("profile-images").getPublicUrl(filePath);

    // Update the UI and the database immediately
    setProfile((prev) => (prev ? { ...prev, avatar_url: publicUrl } : null));
    const { error: dbError } = await supabase
      .from("profiles")
      .update({
        avatar_url: publicUrl,
        updated_at: new Date().toISOString(),
      })
      .eq("id", 1);

    if (dbError) {
      toast.error("Failed to save avatar", { description: dbError.message });
    } else {
      toast.success("Avatar updated!");
    }

    setUploading(false);
  };

  if (loading) {
    return (
      <Card className="max-w-2xl">
        <CardHeader>
          <CardTitle>Profile Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-24 w-24 rounded-full" />
          <div className="space-y-2">
            <Skeleton className="h-4 w-20" />
            <Skeleton className="h-9 w-full" />
          </div>
          <div className="space-y-2">
            <Skeleton className="h-4 w-20" />
            <Skeleton className="h-9 w-full" />
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="max-w-2xl mb-6 shadow-none border-muted/20">
      <CardHeader>
        <CardTitle>Profile Information</CardTitle>
        <CardDescription>
          This information will be displayed on the public homepage.
        </CardDescription>
      </CardHeader>
      <form onSubmit={handleUpdateProfile}>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label>Headshot</Label>
            <div className="flex items-center gap-4">
              {profile?.avatar_url ? (
                <Image
                  src={profile.avatar_url}
                  alt="Current headshot"
                  width={96}
                  height={96}
                  className="h-24 w-24 rounded-full object-cover"
                />
              ) : (
                <div className="flex h-24 w-24 items-center justify-center rounded-full bg-muted text-xs text-muted-foreground">
                  No Image
                </div>
              )}
              <Input
                id="avatar"
                type="file"
                accept="image/*"
                onChange={handleFileUpload}
                disabled={uploading}
              />
            </div>
          </div>
          <div className="space-y-2">
            <Label htmlFor="fullName">Full Name</Label>
            <Input
              id="fullName"
              value={profile?.full_name || ""}
              onChange={(e) =>
                setProfile((prev) =>
                  prev ? { ...prev, full_name: e.target.value } : null
                )
              }
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="roleTitle">Role / Title</Label>
            <Input
              id="roleTitle"
              value={profile?.role_title || ""}
              onChange={(e) =>
                setProfile((prev) =>
                  prev ? { ...prev, role_title: e.target.value } : null
                )
              }
            />
          </div>
        </CardContent>
        <CardFooter className="border-t pt-6">
          <Button type="submit" disabled={loading}>
            {loading ? "Saving..." : "Save Profile"}
          </Button>
        </CardFooter>
      </form>
    </Card>
  );
}
==== ./src/components/admin/OverrideManager.tsx ====
"use client";

import { useState, useEffect } from "react";
import { format, startOfDay, endOfDay, isBefore, isEqual } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Trash2, AlertTriangle } from "lucide-react";
import { toast } from "sonner";
import type { Database } from "@/types/supabase";

type Override = Database["public"]["Tables"]["availability_overrides"]["Row"];

export function OverrideManager() {
  // --- NEW STATE MANAGEMENT ---
  const [persistedOverrides, setPersistedOverrides] = useState<Override[]>([]); // Data from DB
  const [localOverrides, setLocalOverrides] = useState<Override[]>([]); // What's shown in the UI
  const [idsToDelete, setIdsToDelete] = useState<Set<number>>(new Set()); // IDs marked for deletion
  const [hasChanges, setHasChanges] = useState(false); // Controls the "Save" button

  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  const [overrideDate, setOverrideDate] = useState<Date | undefined>(
    new Date()
  );
  const [blockFromTime, setBlockFromTime] = useState("09:00");
  const [blockToTime, setBlockToTime] = useState("12:00");

  // Fetch initial data from the database
  const fetchOverrides = async () => {
    setIsLoading(true);
    try {
      const response = await fetch("/api/admin/availability/overrides");
      if (!response.ok) throw new Error("Could not load overrides");
      const data: Override[] = await response.json();
      setPersistedOverrides(data);
      setLocalOverrides(data); // Initialize local state with DB state
    } catch {
      toast.error("Failed to fetch overrides", {
        description: "Could not load the list of blocked periods.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchOverrides();
  }, []);

  // Effect to check if there are any changes to save
  useEffect(() => {
    const persistedSet = new Set(persistedOverrides.map((o) => o.id));

    // A change exists if an item was deleted or if a new (non-persisted) item was added.
    const hasDeletions = idsToDelete.size > 0;
    const hasAdditions = localOverrides.some((o) => !persistedSet.has(o.id));

    setHasChanges(hasDeletions || hasAdditions);
  }, [localOverrides, persistedOverrides, idsToDelete]);

  const addLocalOverride = (startTime: Date, endTime: Date) => {
    // --- VALIDATION 1: Block times in the past ---
    if (isBefore(endTime, new Date())) {
      toast.warning("Invalid Time", {
        description: "Cannot block a time period that has already passed.",
      });
      return;
    }

    // --- VALIDATION 2: Check for duplicate/overlapping overrides ---
    const isDuplicate = localOverrides.some(
      (o) =>
        isEqual(new Date(o.start_time), startTime) &&
        isEqual(new Date(o.end_time), endTime)
    );
    if (isDuplicate) {
      toast.warning("Duplicate Period", {
        description: "This time period is already blocked.",
      });
      return;
    }

    const newOverride: Override = {
      id: Date.now(), // Temporary client-side ID
      created_at: new Date().toISOString(),
      start_time: startTime.toISOString(),
      end_time: endTime.toISOString(),
      type: "BLOCKED",
    };

    setLocalOverrides((prev) =>
      [...prev, newOverride].sort(
        (a, b) =>
          new Date(a.start_time).getTime() - new Date(b.start_time).getTime()
      )
    );
  };

  const handleBlockPeriod = () => {
    if (!overrideDate) return;
    const from = blockFromTime.split(":").map(Number);
    const to = blockToTime.split(":").map(Number);

    const baseDate = startOfDay(overrideDate);
    const startTime = new Date(baseDate);
    startTime.setHours(from[0], from[1]);

    const endTime = new Date(baseDate);
    endTime.setHours(to[0], to[1]);

    addLocalOverride(startTime, endTime);
  };

  const handleBlockEntireDay = () => {
    if (!overrideDate) return;
    addLocalOverride(startOfDay(overrideDate), endOfDay(overrideDate));
  };

  const handleDeleteOverride = (idToDelete: number) => {
    setLocalOverrides((prev) => prev.filter((o) => o.id !== idToDelete));

    // If the item was already in the database, mark its ID for deletion
    if (persistedOverrides.some((o) => o.id === idToDelete)) {
      setIdsToDelete((prev) => new Set(prev).add(idToDelete));
    }
  };

  const handleSaveChanges = async () => {
    setIsSaving(true);

    // Separate new overrides from existing ones
    const overridesToAdd = localOverrides
      .filter((o) => !persistedOverrides.some((p) => p.id === o.id))
      .map(({ start_time, end_time }) => ({
        start_time,
        end_time,
        type: "BLOCKED",
      })); // Shape for DB insert

    const promise = fetch("/api/admin/availability/overrides/batch", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        overridesToAdd,
        idsToDelete: Array.from(idsToDelete),
      }),
    }).then((res) => {
      if (!res.ok) throw new Error("Server failed to save changes.");
    });

    toast.promise(promise, {
      loading: "Saving changes...",
      success: () => {
        fetchOverrides(); // Re-fetch the cannonical state from DB
        setIdsToDelete(new Set()); // Reset deletion set
        setHasChanges(false);
        return "Changes saved successfully!";
      },
      error: "Failed to save changes.",
      finally: () => setIsSaving(false),
    });
  };

  return (
    <Card className="shadow-none border-foreground/20 rounded-sm">
      <CardHeader>
        <CardTitle>Manage Blocked Time</CardTitle>
        <CardDescription>
          Add or remove periods when you are unavailable. These will override
          your weekly schedule.
        </CardDescription>
      </CardHeader>
      <CardContent className="grid grid-cols-1 gap-8 lg:grid-cols-2">
        {/* ... (Left column with calendar and inputs remains the same) ... */}
        <div className="space-y-6">
          <div className="flex justify-center">
            <Calendar
              mode="single"
              selected={overrideDate}
              onSelect={setOverrideDate}
              disabled={(date) => isBefore(date, startOfDay(new Date()))}
              className="rounded-md border p-0"
            />
          </div>
          <div className="space-y-4 rounded-md border p-4">
            <h3 className="font-semibold">
              Block a Specific Period on{" "}
              {overrideDate ? format(overrideDate, "PPP") : ""}
            </h3>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="from-time">From</Label>
                <Input
                  id="from-time"
                  type="time"
                  value={blockFromTime}
                  onChange={(e) => setBlockFromTime(e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="to-time">To</Label>
                <Input
                  id="to-time"
                  type="time"
                  value={blockToTime}
                  onChange={(e) => setBlockToTime(e.target.value)}
                />
              </div>
            </div>
            <Button onClick={handleBlockPeriod} disabled={!overrideDate}>
              Add Block Period
            </Button>
          </div>
          <div className="space-y-4 rounded-md border p-4">
            <h3 className="font-semibold">Block Entire Day</h3>
            <Button
              onClick={handleBlockEntireDay}
              variant="destructive"
              disabled={!overrideDate}
            >
              Add Block Day
            </Button>
          </div>
        </div>

        {/* --- Right Column with UI changes --- */}
        <div className="space-y-4">
          <h3 className="font-semibold">Upcoming Blocked Periods</h3>
          {isLoading ? (
            <p>Loading...</p>
          ) : localOverrides.length > 0 ? (
            <ul className="max-h-96 space-y-2 overflow-y-auto pr-2">
              {localOverrides.map((override) => (
                <li
                  key={override.id}
                  className="flex items-center justify-between rounded-md border bg-background p-3 text-sm"
                >
                  <div>
                    <p className="font-medium">
                      {format(new Date(override.start_time), "PPP")}
                    </p>
                    <p className="text-muted-foreground">
                      {format(new Date(override.start_time), "p")} -{" "}
                      {format(new Date(override.end_time), "p")}
                    </p>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleDeleteOverride(override.id)}
                  >
                    <Trash2 className="h-4 w-4 text-destructive" />
                  </Button>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-sm text-muted-foreground">
              No upcoming blocked periods.
            </p>
          )}
        </div>
      </CardContent>

      {/* --- NEW FOOTER with Save Button --- */}
      <CardFooter className="flex-col items-stretch gap-4 border-t pt-6 sm:flex-row sm:items-center sm:justify-between">
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          {hasChanges && <AlertTriangle className="h-4 w-4 text-yellow-500" />}
          {hasChanges ? (
            <p>You have unsaved changes.</p>
          ) : (
            <p>All changes are saved.</p>
          )}
        </div>
        <Button onClick={handleSaveChanges} disabled={!hasChanges || isSaving}>
          {isSaving ? "Saving..." : "Save Changes"}
        </Button>
      </CardFooter>
    </Card>
  );
}
==== ./src/components/admin/NewBookingDialog.tsx ====
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Calendar } from "@/components/ui/calendar";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { format, parseISO, startOfDay, addDays } from "date-fns";
import { toast } from "sonner";

interface NewBookingDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onBookingCreated: () => void;
}

const initialFormState = {
  firstName: "",
  lastName: "",
  email: "",
  notes: "",
};

export function NewBookingDialog({
  open,
  onOpenChange,
  onBookingCreated,
}: NewBookingDialogProps) {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState(initialFormState);
  const [selectedDate, setSelectedDate] = useState<Date | undefined>();
  const [availableTimes, setAvailableTimes] = useState<string[]>([]);
  const [isLoadingTimes, setIsLoadingTimes] = useState(false);
  const [selectedTime, setSelectedTime] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Effect to fetch available times
  useEffect(() => {
    if (selectedDate) {
      setIsLoadingTimes(true);
      setAvailableTimes([]);
      setSelectedTime(null);
      const dateParam = startOfDay(selectedDate).toISOString();
      fetch(`/api/availability?date=${dateParam}`)
        .then((res) => res.json())
        .then((data) => {
          if (Array.isArray(data)) setAvailableTimes(data);
        })
        .finally(() => setIsLoadingTimes(false));
    }
  }, [selectedDate]);

  // Reset all state when the dialog is closed or opened
  useEffect(() => {
    if (!open) {
      setTimeout(() => {
        setStep(1);
        setFormData(initialFormState);
        setSelectedDate(undefined);
        setAvailableTimes([]);
        setSelectedTime(null);
      }, 300);
    } else {
      // Pre-select a date if none is selected when opening
      if (!selectedDate) {
        const tomorrow = addDays(new Date(), 1);
        setSelectedDate(tomorrow);
      }
    }
  }, [open]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData((prev) => ({ ...prev, [id]: value }));
  };

  const handleSubmit = async () => {
    if (!selectedTime) return;
    setIsSubmitting(true);
    const promise = fetch("/api/bookings", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        slotTime: selectedTime,
        clientDetails: formData,
      }),
    }).then((res) => {
      if (!res.ok) throw new Error("Failed to create appointment.");
      return res.json();
    });

    toast.promise(promise, {
      loading: "Creating appointment...",
      success: () => {
        onBookingCreated();
        onOpenChange(false);
        return "Appointment created successfully!";
      },
      error: (err) => err.message,
      finally: () => setIsSubmitting(false),
    });
  };

  const proceedToTimeSelection = () => {
    // If a date hasn't already been picked, default to tomorrow.
    if (!selectedDate) {
      const tomorrow = addDays(new Date(), 1);
      setSelectedDate(tomorrow);
    }
    setStep(2);
  };

  const renderStepContent = () => {
    switch (step) {
      case 1: // Client Information
        return (
          // --- CHANGE: Added flexbox centering classes ---
          <div className="min-h-[340px] flex justify-center items-center">
            <div className="w-full grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="firstName" className="text-right">
                  First Name
                </Label>
                <Input
                  id="firstName"
                  value={formData.firstName}
                  onChange={handleInputChange}
                  className="col-span-3"
                  required
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="lastName" className="text-right">
                  Last Name
                </Label>
                <Input
                  id="lastName"
                  value={formData.lastName}
                  onChange={handleInputChange}
                  className="col-span-3"
                  required
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="email" className="text-right">
                  Email
                </Label>
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className="col-span-3"
                  required
                />
              </div>
            </div>
          </div>
        );
      case 2: // Date and Time Selection
        return (
          // The content of this step already fills the space, so no centering needed.
          // The existing wrapper provides the consistent height.
          <div className="min-h-[340px] grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
            <div className="flex justify-center items-center">
              <Calendar
                mode="single"
                selected={selectedDate}
                onSelect={setSelectedDate}
                disabled={(date) => date < startOfDay(new Date())}
              />
            </div>
            <div className="space-y-2">
              <p className="text-sm font-medium">
                Available Times for{" "}
                {selectedDate ? format(selectedDate, "PPP") : "..."}
              </p>
              <div className="grid grid-cols-3 gap-2 max-h-64 overflow-y-auto pr-2">
                {isLoadingTimes && (
                  <p className="col-span-3 text-sm text-muted-foreground animate-pulse">
                    Loading...
                  </p>
                )}
                {!isLoadingTimes &&
                  availableTimes.length === 0 &&
                  selectedDate && (
                    <p className="col-span-3 text-sm text-muted-foreground">
                      No available slots.
                    </p>
                  )}
                {availableTimes.map((time) => (
                  <Button
                    key={time}
                    type="button"
                    variant={selectedTime === time ? "default" : "outline"}
                    onClick={() => setSelectedTime(time)}
                  >
                    {format(parseISO(time), "p")}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        );
      case 3: // Review
        return (
          // --- CHANGE: Added flexbox centering classes ---
          <div className="min-h-[340px] flex justify-center items-center">
            <div className="w-full space-y-4 py-4 text-sm">
              <p>Please confirm the details for the new appointment:</p>
              <div className="space-y-2 rounded-md border p-4 border-muted/20">
                <p>
                  <strong>Client:</strong> {formData.firstName}{" "}
                  {formData.lastName}
                </p>
                <p>
                  <strong>Email:</strong> {formData.email}
                </p>
                <p>
                  <strong>Date:</strong>{" "}
                  {selectedDate ? format(selectedDate, "PPPP") : "Not selected"}
                </p>
                <p>
                  <strong>Time:</strong>{" "}
                  {selectedTime
                    ? format(parseISO(selectedTime), "p")
                    : "Not selected"}
                </p>
              </div>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  const renderFooter = () => {
    switch (step) {
      case 1:
        return (
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
            >
              Cancel
            </Button>
            {/* This button now calls our updated function */}
            <Button
              type="button"
              onClick={proceedToTimeSelection}
              disabled={
                !formData.firstName || !formData.lastName || !formData.email
              }
            >
              Next
            </Button>
          </DialogFooter>
        );
      case 2:
        return (
          <DialogFooter className="sm:justify-between">
            <Button type="button" variant="outline" onClick={() => setStep(1)}>
              Back
            </Button>
            <Button
              type="button"
              onClick={() => setStep(3)}
              disabled={!selectedTime}
            >
              Review
            </Button>
          </DialogFooter>
        );
      case 3:
        return (
          <DialogFooter className="sm:justify-between">
            <Button type="button" variant="outline" onClick={() => setStep(2)}>
              Back
            </Button>
            <Button
              type="button"
              onClick={handleSubmit}
              disabled={isSubmitting}
            >
              {isSubmitting ? "Creating..." : "Confirm & Create"}
            </Button>
          </DialogFooter>
        );
      default:
        return null;
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      {/* The consistent size is now controlled by the min-height in renderStepContent */}
      <DialogContent className="sm:max-w-[625px] p-10">
        <DialogHeader>
          <DialogTitle>New Appointment</DialogTitle>
          <DialogDescription>
            {step === 1 && "Step 1: Enter client information."}
            {step === 2 && "Step 2: Choose a date and time."}
            {step === 3 && "Step 3: Review and confirm."}
          </DialogDescription>
        </DialogHeader>
        {renderStepContent()}
        {renderFooter()}
      </DialogContent>
    </Dialog>
  );
}
==== ./src/components/admin/UpdatePasswordForm.tsx ====
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { Eye, EyeOff } from "lucide-react"; // <-- Import the icons

export function UpdatePasswordForm() {
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  // --- NEW: State to manage password visibility ---
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);

    // This logic remains unchanged
    const promise = fetch("/api/admin/settings/password", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ newPassword, confirmPassword }),
    }).then(async (res) => {
      const data = await res.json();
      if (!res.ok) {
        throw new Error(data.error || "An unknown error occurred.");
      }
      return data;
    });

    toast.promise(promise, {
      loading: "Updating password...",
      success: (data) => {
        setNewPassword("");
        setConfirmPassword("");
        return data.message;
      },
      error: (err) => err.message,
      finally: () => setIsLoading(false),
    });
  };

  return (
    <Card className="max-w-2xl mb-6 shadow-none border-muted/20">
      <CardHeader>
        <CardTitle>Update Password</CardTitle>
        <CardDescription>
          Choose a new, strong password. You will be logged out of other
          sessions.
        </CardDescription>
      </CardHeader>
      <form onSubmit={handleSubmit}>
        <CardContent className="space-y-4">
          {/* --- NEW: New Password Input with Icon --- */}
          <div className="space-y-2">
            <Label htmlFor="new-password">New Password</Label>
            <div className="relative">
              <Input
                id="new-password"
                // Dynamically set the type based on state
                type={showNewPassword ? "text" : "password"}
                required
                minLength={8}
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                className="pr-10" // Add padding to the right for the icon
              />
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="absolute inset-y-0 right-0 h-full w-10 text-muted-foreground hover:bg-transparent"
                onClick={() => setShowNewPassword((prev) => !prev)}
              >
                {showNewPassword ? (
                  <EyeOff className="h-4 w-4" />
                ) : (
                  <Eye className="h-4 w-4" />
                )}
              </Button>
            </div>
          </div>
          {/* --- NEW: Confirm Password Input with Icon --- */}
          <div className="space-y-2">
            <Label htmlFor="confirm-password">Confirm New Password</Label>
            <div className="relative">
              <Input
                id="confirm-password"
                // Dynamically set the type based on state
                type={showConfirmPassword ? "text" : "password"}
                required
                minLength={8}
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                className="pr-10" // Add padding to the right for the icon
              />
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className="absolute inset-y-0 right-0 h-full w-10 text-muted-foreground hover:bg-transparent"
                onClick={() => setShowConfirmPassword((prev) => !prev)}
              >
                {showConfirmPassword ? (
                  <EyeOff className="h-4 w-4" />
                ) : (
                  <Eye className="h-4 w-4" />
                )}
              </Button>
            </div>
          </div>
        </CardContent>
        <CardFooter className="border-t pt-6">
          <Button type="submit" disabled={isLoading}>
            {isLoading ? "Updating..." : "Update Password"}
          </Button>
        </CardFooter>
      </form>
    </Card>
  );
}
==== ./src/components/admin/ScheduleSkeleton.tsx ====
import { Skeleton } from "@/components/ui/skeleton";

/**
 * A dedicated skeleton loading component for the weekly schedule UI.
 * It mimics the layout of the actual schedule rows to prevent layout shift.
 */
export function ScheduleSkeleton() {
  // We can create an array of a few placeholders to show a list loading.
  const placeholders = Array.from({ length: 5 });

  return (
    <div className="space-y-4">
      {placeholders.map((_, index) => (
        <div
          key={index}
          className="flex flex-col gap-4 rounded-md border p-4 sm:flex-row sm:items-center"
        >
          {/* Left side: Checkbox and Label */}
          <div className="flex flex-1 items-center">
            <Skeleton className="h-4 w-4" />
            <Skeleton className="ml-3 h-4 w-28" />
          </div>

          {/* Right side: Time inputs */}
          <div className="grid flex-1 grid-cols-2 gap-4">
            <div className="space-y-1">
              <Skeleton className="h-4 w-12" />
              <Skeleton className="h-9 w-full" />
            </div>
            <div className="space-y-1">
              <Skeleton className="h-4 w-8" />
              <Skeleton className="h-9 w-full" />
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}
==== ./src/components/admin/ContentEditor.tsx ====
"use client";

import { useState, useEffect, useCallback } from "react";
import { createClient } from "@/lib/supabase/client";
import type { HomePageData } from "@/types/homepage";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { toast } from "sonner";
import { PlusCircle, Trash2 } from "lucide-react";
import Image from "next/image"; // Add Image import
import { Skeleton } from "../ui/skeleton"; // Add Skeleton import
import { Database } from "@/types/supabase";

// Get the type for the icon keys from our main HomePageData type
type ServiceIcon = HomePageData["services"]["settings"][number]["icon"];
type Profile = Database["public"]["Tables"]["profiles"]["Row"];

// Define our list of selectable icons, ensuring they match the ServiceIcon type
const iconOptions: ServiceIcon[] = ["home", "tv", "school", "users"];

export function ContentEditor() {
  const supabase = createClient();
  const [content, setContent] = useState<Omit<HomePageData, "profile"> | null>(
    null
  );

  const [profile, setProfile] = useState<Profile | null>(null);
  const [uploading, setUploading] = useState(false);

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  const fetchContent = useCallback(async () => {
    setLoading(true);
    // Fetch both content and profile data in parallel
    const [contentRes, profileRes] = await Promise.all([
      supabase.from("homepage_content").select("content").eq("id", 1).single(),
      supabase.from("profiles").select("*").eq("id", 1).single(),
    ]);

    if (contentRes.error) toast.error("Failed to load page content.");
    else setContent(contentRes.data.content as Omit<HomePageData, "profile">);

    if (profileRes.error) toast.error("Failed to load profile data.");
    else setProfile(profileRes.data);

    setLoading(false);
  }, [supabase]);

  useEffect(() => {
    fetchContent();
  }, [fetchContent]);

  const handleSave = async () => {
    setSaving(true);
    // Save both content and profile data in parallel
    const [contentPromise, profilePromise] = await Promise.all([
      supabase
        .from("homepage_content")
        .update({ content: content })
        .eq("id", 1),
      supabase
        .from("profiles")
        .update({
          full_name: profile?.full_name,
          role_title: profile?.role_title,
        })
        .eq("id", 1),
    ]);

    if (contentPromise.error || profilePromise.error) {
      toast.error("Failed to save all changes.");
    } else {
      toast.success("Homepage content and profile updated!");
    }
    setSaving(false);
  };
  const handleProfileChange = (
    key: "full_name" | "role_title",
    value: string
  ) => {
    setProfile((prev) => (prev ? { ...prev, [key]: value } : null));
  };

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;
    setUploading(true);
    const file = e.target.files[0];
    const fileExt = file.name.split(".").pop();
    const filePath = `public-avatar.${fileExt}`;

    const { error: uploadError } = await supabase.storage
      .from("profile-images")
      .upload(filePath, file, { upsert: true });

    if (uploadError) {
      toast.error("Upload failed", { description: uploadError.message });
      setUploading(false);
      return;
    }

    const {
      data: { publicUrl },
    } = supabase.storage.from("profile-images").getPublicUrl(filePath);

    const { error: dbError } = await supabase
      .from("profiles")
      .update({ avatar_url: publicUrl })
      .eq("id", 1);

    if (dbError) {
      toast.error("Failed to save avatar", { description: dbError.message });
    } else {
      // Also update local state to show the new image immediately
      setProfile((prev) => (prev ? { ...prev, avatar_url: publicUrl } : null));
      toast.success("Avatar updated!");
    }
    setUploading(false);
  };

  // --- THIS IS THE FIX for the 'any' type error ---
  // We use generics to make this function strongly typed.
  const handleNestedChange = <T extends keyof Omit<HomePageData, "profile">>(
    section: T,
    key: keyof Omit<HomePageData, "profile">[T],
    value: Omit<HomePageData, "profile">[T][keyof Omit<
      HomePageData,
      "profile"
    >[T]]
  ) => {
    setContent((prev) => {
      if (!prev) return null;
      return {
        ...prev,
        [section]: {
          ...prev[section],
          [key]: value,
        },
      };
    });
  };

  if (loading || !content || !profile) {
    // A more comprehensive skeleton
    return <div>Loading editor...</div>;
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Hero Section</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="heroTitle">Title</Label>
            <Input
              id="heroTitle"
              value={content.hero.title}
              onChange={(e) =>
                handleNestedChange("hero", "title", e.target.value)
              }
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="heroSubtitle">Subtitle</Label>
            <Textarea
              id="heroSubtitle"
              value={content.hero.subtitle}
              onChange={(e) =>
                handleNestedChange("hero", "subtitle", e.target.value)
              }
            />
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>About Section</CardTitle>
          <CardDescription>
            Manage the headshot, name, role, and bio paragraphs.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* --- Profile Fields --- */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="md:col-span-1 space-y-2">
              <Label>Headshot</Label>
              <div className="flex flex-col items-center gap-4">
                {profile?.avatar_url ? (
                  <Image
                    src={profile.avatar_url}
                    alt="Current headshot"
                    width={160}
                    height={160}
                    className="h-40 w-40 rounded-full object-cover border"
                  />
                ) : (
                  <div className="flex h-40 w-40 items-center justify-center rounded-full bg-muted text-xs text-muted-foreground">
                    No Image
                  </div>
                )}
                <Input
                  id="avatar"
                  type="file"
                  accept="image/*"
                  onChange={handleFileUpload} // We'll need to define this function
                  disabled={uploading} // and this state
                  className="text-xs"
                />
              </div>
            </div>
            <div className="md:col-span-2 space-y-4">
              <div className="space-y-2">
                <Label htmlFor="profileFullName">Full Name</Label>
                <Input
                  id="profileFullName"
                  value={profile?.full_name || ""}
                  onChange={(e) =>
                    handleProfileChange("full_name", e.target.value)
                  } // New handler
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="profileRoleTitle">Role / Title</Label>
                <Input
                  id="profileRoleTitle"
                  value={profile?.role_title || ""}
                  onChange={(e) =>
                    handleProfileChange("role_title", e.target.value)
                  } // New handler
                />
              </div>
            </div>
          </div>

          {/* --- About Section Fields --- */}
          <div className="space-y-2">
            <Label htmlFor="aboutTitle">Section Title</Label>
            <Input
              id="aboutTitle"
              value={content.about.title}
              onChange={(e) =>
                handleNestedChange("about", "title", e.target.value)
              }
            />
          </div>
          <div className="space-y-2">
            <Label>Bio Paragraphs</Label>
            {content.about.body.map((paragraph, index) => (
              <div key={index} className="flex items-center gap-2">
                <Textarea
                  placeholder={`Paragraph ${index + 1}`}
                  value={paragraph}
                  onChange={(e) => {
                    const newBody = [...content.about.body];
                    newBody[index] = e.target.value;
                    handleNestedChange("about", "body", newBody);
                  }}
                />
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => {
                    const newBody = content.about.body.filter(
                      (_, i) => i !== index
                    );
                    handleNestedChange("about", "body", newBody);
                  }}
                >
                  <Trash2 className="h-4 w-4 text-destructive" />
                </Button>
              </div>
            ))}
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                const newBody = [...content.about.body, ""];
                handleNestedChange("about", "body", newBody);
              }}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Paragraph
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Guiding Principles Section</CardTitle>
          <CardDescription>
            Manage the title, subtitle, and list of core values.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* --- FIX IS HERE: Added Labels --- */}
          <div className="space-y-2">
            <Label htmlFor="guidingPrinciplesTitle">Section Title</Label>
            <Input
              id="guidingPrinciplesTitle"
              value={content.guidingPrinciples.title}
              onChange={(e) =>
                handleNestedChange("guidingPrinciples", "title", e.target.value)
              }
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="guidingPrinciplesSubtitle">Section Subtitle</Label>
            <Textarea
              id="guidingPrinciplesSubtitle"
              value={content.guidingPrinciples.subtitle}
              onChange={(e) =>
                handleNestedChange(
                  "guidingPrinciples",
                  "subtitle",
                  e.target.value
                )
              }
            />
          </div>

          {/* ... inside the Guiding Principles Card ... */}

          <div className="space-y-4 rounded-md border p-4">
            <Label className="text-base font-semibold">Core Values List</Label>
            <div className="space-y-4">
              {content.guidingPrinciples.values.map((value, index) => (
                <div key={index} className="space-y-3 rounded-lg border p-3">
                  {/* --- FIX IS HERE: Added explicit labels for Title and Description --- */}
                  <div className="space-y-1">
                    <Label
                      htmlFor={`value-title-${index}`}
                      className="text-xs font-medium"
                    >
                      Title
                    </Label>
                    <div className="flex items-center gap-2">
                      <Input
                        id={`value-title-${index}`}
                        placeholder="Value Title (e.g., Faith-Centered)"
                        value={value.title}
                        onChange={(e) => {
                          const newList = [...content.guidingPrinciples.values];
                          newList[index].title = e.target.value;
                          handleNestedChange(
                            "guidingPrinciples",
                            "values",
                            newList
                          );
                        }}
                      />
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const newList =
                            content.guidingPrinciples.values.filter(
                              (_, i) => i !== index
                            );
                          handleNestedChange(
                            "guidingPrinciples",
                            "values",
                            newList
                          );
                        }}
                      >
                        <Trash2 className="h-4 w-4 text-destructive" />
                      </Button>
                    </div>
                  </div>
                  <div className="space-y-1">
                    <Label
                      htmlFor={`value-desc-${index}`}
                      className="text-xs font-medium"
                    >
                      Description
                    </Label>
                    <Textarea
                      id={`value-desc-${index}`}
                      placeholder="Value description..."
                      value={value.description}
                      onChange={(e) => {
                        const newList = [...content.guidingPrinciples.values];
                        newList[index].description = e.target.value;
                        handleNestedChange(
                          "guidingPrinciples",
                          "values",
                          newList
                        );
                      }}
                    />
                  </div>
                </div>
              ))}
            </div>
            <Button
              variant="outline"
              size="sm"
              className="mt-4"
              onClick={() => {
                const newList = [
                  ...content.guidingPrinciples.values,
                  { title: "", description: "" },
                ];
                handleNestedChange("guidingPrinciples", "values", newList);
              }}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Value
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Services Section</CardTitle>
          <CardDescription>
            Manage the main services and the flexible setting options displayed
            on the homepage.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="servicesTitle">Section Title</Label>
            <Input
              id="servicesTitle"
              value={content.services.title}
              onChange={(e) =>
                handleNestedChange("services", "title", e.target.value)
              }
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="servicesSubtitle">Section Subtitle</Label>
            <Textarea
              id="servicesSubtitle"
              value={content.services.subtitle}
              onChange={(e) =>
                handleNestedChange("services", "subtitle", e.target.value)
              }
            />
          </div>

          {/* Part 1: Main Service List */}
          <div className="space-y-4 rounded-md border p-4">
            <Label className="text-base font-semibold">
              Main Services List
            </Label>
            <div className="space-y-4">
              {content.services.list.map((service, index) => (
                <div key={index} className="space-y-3 rounded-lg border p-3">
                  {/* --- FIX IS HERE: Added explicit labels for Title and Description --- */}
                  <div className="space-y-1">
                    <Label
                      htmlFor={`service-title-${index}`}
                      className="text-xs font-medium"
                    >
                      Title
                    </Label>
                    <div className="flex items-center gap-2">
                      <Input
                        id={`service-title-${index}`}
                        placeholder="Service Title (e.g., 1:1 ABA Therapy)"
                        value={service.title}
                        onChange={(e) => {
                          const newList = [...content.services.list];
                          newList[index].title = e.target.value;
                          handleNestedChange("services", "list", newList);
                        }}
                      />
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => {
                          const newList = content.services.list.filter(
                            (_, i) => i !== index
                          );
                          handleNestedChange("services", "list", newList);
                        }}
                      >
                        <Trash2 className="h-4 w-4 text-destructive" />
                      </Button>
                    </div>
                  </div>
                  <div className="space-y-1">
                    <Label
                      htmlFor={`service-desc-${index}`}
                      className="text-xs font-medium"
                    >
                      Description
                    </Label>
                    <Textarea
                      id={`service-desc-${index}`}
                      placeholder="Service description..."
                      value={service.description}
                      onChange={(e) => {
                        const newList = [...content.services.list];
                        newList[index].description = e.target.value;
                        handleNestedChange("services", "list", newList);
                      }}
                    />
                  </div>
                </div>
              ))}
            </div>
            <Button
              variant="outline"
              size="sm"
              className="mt-4" // Add some margin top
              onClick={() => {
                const newList = [
                  ...content.services.list,
                  { title: "", description: "" },
                ];
                handleNestedChange("services", "list", newList);
              }}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Service
            </Button>
          </div>

          {/* Part 2: Flexible Service Settings */}
          <div className="space-y-4 rounded-md border p-4">
            <div className="space-y-2">
              <Label
                htmlFor="settingsTitle"
                className="text-base font-semibold"
              >
                Settings Section Title
              </Label>
              <Input
                id="settingsTitle"
                value={content.services.settingsTitle}
                onChange={(e) =>
                  handleNestedChange(
                    "services",
                    "settingsTitle",
                    e.target.value
                  )
                }
              />
            </div>

            <Label className="text-sm font-medium">Individual Settings</Label>
            <div className="space-y-2">
              {content.services.settings.map((setting, index) => (
                <div
                  key={index}
                  className="grid grid-cols-[1fr_2fr_auto] items-center gap-2"
                >
                  <div>
                    <Label className="text-xs text-muted-foreground">
                      Icon
                    </Label>
                    <Select
                      value={setting.icon}
                      onValueChange={(value: ServiceIcon) => {
                        const newSettings = [...content.services.settings];
                        newSettings[index].icon = value;
                        handleNestedChange("services", "settings", newSettings);
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select icon" />
                      </SelectTrigger>
                      <SelectContent>
                        {iconOptions.map((opt) => (
                          <SelectItem key={opt} value={opt}>
                            {opt.charAt(0).toUpperCase() + opt.slice(1)}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label className="text-xs text-muted-foreground">
                      Text
                    </Label>
                    <Input
                      placeholder="Setting Text (e.g., Home-Based)"
                      value={setting.text}
                      onChange={(e) => {
                        const newSettings = [...content.services.settings];
                        newSettings[index].text = e.target.value;
                        handleNestedChange("services", "settings", newSettings);
                      }}
                    />
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="self-end" // Align button to the bottom
                    onClick={() => {
                      const newSettings = content.services.settings.filter(
                        (_, i) => i !== index
                      );
                      handleNestedChange("services", "settings", newSettings);
                    }}
                  >
                    <Trash2 className="h-4 w-4 text-destructive" />
                  </Button>
                </div>
              ))}
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                // --- THIS IS THE FIX ---
                // Explicitly define the new setting with the correct type.
                // HomePageData['services']['settings'][number] is a robust way to get the type of one item.
                const newSetting: HomePageData["services"]["settings"][number] =
                  {
                    icon: "home", // This is now correctly typed as ServiceIcon
                    text: "",
                  };

                const newSettings = [
                  ...content.services.settings,
                  newSetting, // Add the correctly typed object
                ];
                handleNestedChange("services", "settings", newSettings);
              }}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Setting
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Intake Process Section</CardTitle>
          <CardDescription>
            Manage the &quot;Getting Started is Simple&quot; steps on the
            homepage.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="intakeTitle">Section Title</Label>
            <Input
              id="intakeTitle"
              value={content.intake.title}
              onChange={(e) =>
                handleNestedChange("intake", "title", e.target.value)
              }
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="intakeSubtitle">Section Subtitle</Label>
            <Textarea
              id="intakeSubtitle"
              value={content.intake.subtitle}
              onChange={(e) =>
                handleNestedChange("intake", "subtitle", e.target.value)
              }
            />
          </div>

          <div className="space-y-4 rounded-md border p-4">
            <Label className="text-base font-semibold">Intake Steps List</Label>
            <div className="space-y-4">
              {content.intake.steps.map((step, index) => (
                <div key={index} className="space-y-3 rounded-lg border p-3">
                  <div className="flex justify-between items-center">
                    <p className="text-sm font-semibold">Step {index + 1}</p>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => {
                        const newList = content.intake.steps.filter(
                          (_, i) => i !== index
                        );
                        handleNestedChange("intake", "steps", newList);
                      }}
                    >
                      <Trash2 className="h-4 w-4 text-destructive" />
                    </Button>
                  </div>
                  <div className="space-y-1">
                    <Label
                      htmlFor={`step-title-${index}`}
                      className="text-xs font-medium"
                    >
                      Title
                    </Label>
                    <Input
                      id={`step-title-${index}`}
                      placeholder="Step Title (e.g., Book a Free Consultation)"
                      value={step.title}
                      onChange={(e) => {
                        const newList = [...content.intake.steps];
                        newList[index].title = e.target.value;
                        handleNestedChange("intake", "steps", newList);
                      }}
                    />
                  </div>
                  <div className="space-y-1">
                    <Label
                      htmlFor={`step-desc-${index}`}
                      className="text-xs font-medium"
                    >
                      Description
                    </Label>
                    <Textarea
                      id={`step-desc-${index}`}
                      placeholder="Step description..."
                      value={step.description}
                      onChange={(e) => {
                        const newList = [...content.intake.steps];
                        newList[index].description = e.target.value;
                        handleNestedChange("intake", "steps", newList);
                      }}
                    />
                  </div>
                </div>
              ))}
            </div>
            <Button
              variant="outline"
              size="sm"
              className="mt-4"
              onClick={() => {
                // The 'step' number is derived from the index, so we only need title and desc
                const newList = [
                  ...content.intake.steps,
                  {
                    step: content.intake.steps.length + 1,
                    title: "",
                    description: "",
                  },
                ];
                handleNestedChange("intake", "steps", newList);
              }}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Step
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* FAQ SECTION */}
      <Card>
        <CardHeader>
          <CardTitle>FAQ Section</CardTitle>
          <CardDescription>
            Manage the &quot;Frequently Asked Questions&quot; on the homepage.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="faqTitle">Section Title</Label>
            <Input
              id="faqTitle"
              value={content.faq.title}
              onChange={(e) =>
                handleNestedChange("faq", "title", e.target.value)
              }
            />
          </div>

          <div className="space-y-4 rounded-md border p-4">
            <Label className="text-base font-semibold">Questions List</Label>
            <div className="space-y-4">
              {content.faq.questions.map((faqItem, index) => (
                <div key={index} className="space-y-3 rounded-lg border p-3">
                  {/* --- THIS IS THE FIX --- */}
                  <div className="flex justify-between items-center">
                    <p className="text-sm font-semibold text-muted-foreground">
                      Question {index + 1}
                    </p>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => {
                        const newList = content.faq.questions.filter(
                          (_, i) => i !== index
                        );
                        handleNestedChange("faq", "questions", newList);
                      }}
                    >
                      <Trash2 className="h-4 w-4 text-destructive" />
                    </Button>
                  </div>
                  <div className="space-y-1">
                    <Label
                      htmlFor={`faq-question-${index}`}
                      className="text-xs font-medium"
                    >
                      Question
                    </Label>
                    <Input
                      id={`faq-question-${index}`}
                      placeholder="Question..."
                      value={faqItem.question}
                      onChange={(e) => {
                        const newList = [...content.faq.questions];
                        newList[index].question = e.target.value;
                        handleNestedChange("faq", "questions", newList);
                      }}
                    />
                  </div>
                  <div className="space-y-1">
                    <Label
                      htmlFor={`faq-answer-${index}`}
                      className="text-xs font-medium"
                    >
                      Answer
                    </Label>
                    <Textarea
                      id={`faq-answer-${index}`}
                      placeholder="Answer..."
                      value={faqItem.answer}
                      onChange={(e) => {
                        const newList = [...content.faq.questions];
                        newList[index].answer = e.target.value;
                        handleNestedChange("faq", "questions", newList);
                      }}
                    />
                  </div>
                </div>
              ))}
            </div>
            <Button
              variant="outline"
              size="sm"
              className="mt-4"
              onClick={() => {
                const newList = [
                  ...content.faq.questions,
                  { question: "", answer: "" },
                ];
                handleNestedChange("faq", "questions", newList);
              }}
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Question
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* CTA SECTION */}
      <Card>
        <CardHeader>
          <CardTitle>Call to Action (CTA) Section</CardTitle>
          <CardDescription>
            Manage the final prompt at the bottom of the homepage.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="ctaTitle">Title</Label>
            <Input
              id="ctaTitle"
              value={content.cta.title}
              onChange={(e) =>
                handleNestedChange("cta", "title", e.target.value)
              }
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="ctaSubtitle">Subtitle</Label>
            <Textarea
              id="ctaSubtitle"
              value={content.cta.subtitle}
              onChange={(e) =>
                handleNestedChange("cta", "subtitle", e.target.value)
              }
            />
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-end mt-6">
        <Button onClick={handleSave} disabled={saving || loading}>
          {saving ? "Saving..." : "Save All Content"}
        </Button>
      </div>
    </div>
  );
}
==== ./src/components/ui/button.tsx ====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
==== ./src/components/ui/calendar.tsx ====
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          "absolute bg-popover inset-0 opacity-0",
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }
==== ./src/components/ui/skeleton.tsx ====
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }
==== ./src/components/ui/avatar.tsx ====
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }
==== ./src/components/ui/input.tsx ====
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
==== ./src/components/ui/textarea.tsx ====
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }
==== ./src/components/ui/card.tsx ====
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
==== ./src/components/ui/table.tsx ====
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
==== ./src/components/ui/dialog.tsx ====
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
==== ./src/components/ui/select.tsx ====
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
==== ./src/components/ui/popover.tsx ====
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
==== ./src/components/ui/label.tsx ====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
==== ./src/components/ui/badge.tsx ====
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
        success:
          "border-transparent bg-green-500 text-primary-foreground hover:bg-green-500/80",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span";

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  );
}

export { Badge, badgeVariants };
==== ./src/components/ui/sonner.tsx ====
"use client";

import { useTheme } from "next-themes";
import { Toaster as Sonner, ToasterProps } from "sonner";

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  );
};

export { Toaster };
==== ./src/components/ui/checkbox.tsx ====
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }
==== ./src/components/Footer.tsx ====
// FILE: src/components/Footer.tsx

"use client";

import Link from "next/link";
import { useLenis } from "@/context/LenisContext";

export function Footer() {
  const lenis = useLenis();

  const handleScrollTo = (targetId: string) => {
    if (lenis) {
      const targetElement = document.querySelector(targetId);
      if (targetElement instanceof HTMLElement) {
        lenis.scrollTo(targetElement, { offset: -80 });
      }
    }
  };

  // New function to handle scrolling to the top of the page
  const handleScrollToTop = () => {
    if (lenis) {
      lenis.scrollTo(0);
    }
  };

  return (
    <footer
      id="contact"
      className="scroll-mt-20 w-full border-t border-[var(--border)] bg-[var(--card)]"
    >
      <div className="container mx-auto grid max-w-7xl grid-cols-1 gap-8 px-4 py-12 sm:px-6 md:grid-cols-3 lg:px-8">
        <div>
          {/* The logo is now a button with the original styling */}
          <button
            onClick={handleScrollToTop}
            className="text-xl font-bold text-[var(--primary)] text-left"
          >
            DBTS
          </button>
          <p className="mt-2 text-sm text-[var(--muted)]">
            Dayspring Behavioural Therapeutic Services
          </p>
          <p className="mt-4 text-sm text-[var(--muted)]">
            Providing compassionate care for a brighter tomorrow.
          </p>
        </div>
        <div className="grid grid-cols-2 gap-8 md:col-span-2 md:grid-cols-3">
          <div>
            <h4 className="font-semibold text-[var(--foreground)]">
              Navigation
            </h4>
            <ul className="mt-4 space-y-2">
              <li>
                <button
                  onClick={() => handleScrollTo("#about")}
                  className="text-sm text-[var(--muted)] hover:text-[var(--primary)]"
                >
                  About
                </button>
              </li>
              <li>
                <button
                  onClick={() => handleScrollTo("#services")}
                  className="text-sm text-[var(--muted)] hover:text-[var(--primary)]"
                >
                  Services
                </button>
              </li>
              <li>
                <button
                  onClick={() => handleScrollTo("#faq")}
                  className="text-sm text-[var(--muted)] hover:text-[var(--primary)]"
                >
                  FAQ
                </button>
              </li>
              <li>
                <Link
                  href="/contact"
                  className="text-sm text-[var(--muted)] hover:text-[var(--primary)]"
                >
                  Contact
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold text-[var(--foreground)]">Legal</h4>
            <ul className="mt-4 space-y-2">
              <li>
                <a
                  href="#"
                  className="text-sm text-[var(--muted)] hover:text-[var(--primary)]"
                >
                  Privacy Policy
                </a>
              </li>
              <li>
                <a
                  href="#"
                  className="text-sm text-[var(--muted)] hover:text-[var(--primary)]"
                >
                  Terms of Service
                </a>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold text-[var(--foreground)]">
              Contact Us
            </h4>
            <ul className="mt-4 space-y-2 text-sm text-[var(--muted)]">
              <li>Serving Ontario, Canada</li>
              <li className="break-all">dayspringbehavioural@gmail.com</li>
              <li>
                <a
                  href="#"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="hover:text-[var(--primary)]"
                >
                  Instagram
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div className="border-t border-[var(--border)] py-6">
        <div className="container mx-auto flex flex-col items-center justify-between gap-4 px-4 text-center sm:flex-row sm:px-6 lg:px-8">
          <p className="text-sm text-[var(--muted)]">
            © {new Date().getFullYear()} Dayspring Behavioural Therapeutic
            Services. All Rights Reserved.
          </p>
          <Link
            href="/login"
            className="text-xs text-muted transition-colors hover:text-muted/50"
          >
            Admin Login
          </Link>
        </div>
      </div>
    </footer>
  );
}
==== ./src/components/HomePageContent.tsx ====
// FILE: src/components/HomePageContent.tsx

"use client"; // This component uses animations, so it must be a client component.

import React from "react";
import Image from "next/image";
import Link from "next/link";
import { AnimatedSection } from "@/components/AnimatedSection";
import { Button } from "@/components/ui/button";
import type { HomePageData } from "@/types/homepage"; // <-- Import our new data contract

// --- ICON COMPONENTS ---
const HomeIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h7.5"
    />
  </svg>
);
const TvIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M6 20.25h12m-7.5-3.75v3.75m-3.75-3.75H1.5V5.625c0-1.036.84-1.875 1.875-1.875h17.25c1.035 0 1.875.84 1.875 1.875v10.875h-4.5M3.75 18h16.5"
    />
  </svg>
);
const SchoolIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M4.26 10.147a60.438 60.438 0 0 0-.491 6.347A48.627 48.627 0 0 1 12 20.904a48.627 48.627 0 0 1 8.232-4.41 60.46 60.46 0 0 0-.491-6.347m-15.482 0a50.57 50.57 0 0 0-2.658-.813A59.906 59.906 0 0 1 12 3.493a59.903 59.903 0 0 1 10.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.697 50.697 0 0 1 12 13.489a50.702 50.702 0 0 1 7.74-3.342M6.75 15a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm0 0v-3.675A55.378 55.378 0 0 1 12 8.443m-7.007 11.55A5.981 5.981 0 0 0 6.75 15.75v-1.5"
    />
  </svg>
);
const UsersIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    {...props}
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    strokeWidth={1.5}
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      d="M18 18.72a9.094 9.094 0 0 0 3.741-.479 3 3 0 0 0-4.682-2.72m-7.5-2.962a3.75 3.75 0 1 0-5.215-3.184 3.75 3.75 0 0 0 5.215 3.184Zm-3.215-2.209a3 3 0 0 0 4.135 2.197m-4.135-2.197a3 3 0 0 1-2.197 4.135m0-4.135a3 3 0 0 0-4.135-2.197M18 18.72a9.094 9.094 0 0 0 3.741-.479 3 3 0 0 0-4.682-2.72m-7.5-2.962a3.75 3.75 0 1 0-5.215-3.184 3.75 3.75 0 0 0 5.215 3.184Zm0 0a3.75 3.75 0 1 0 7.5 0 3.75 3.75 0 0 0-7.5 0Z"
    />
  </svg>
);

const iconMap = {
  home: HomeIcon,
  tv: TvIcon,
  school: SchoolIcon,
  users: UsersIcon,
};

export function HomePageContent({ content }: { content: HomePageData | null }) {
  if (!content) {
    return <div>Loading page content...</div>;
  }

  const {
    profile,
    hero,
    about,
    guidingPrinciples,
    services,
    intake,
    faq,
    cta,
  } = content;

  return (
    <>
      <section className="relative flex h-[60vh] min-h-[500px] w-full items-center justify-center text-center text-white lg:h-[70vh]">
        <Image
          src="/hero-background.jpg"
          alt="A calm, modern, and sunlit therapy room with soft seating and children's toys on a rug"
          fill
          priority
        />
        <div className="absolute inset-0 bg-black/40" />
        <div className="relative z-10">
          <AnimatedSection>
            <div className="flex flex-col items-center justify-center space-y-6 px-4">
              <h1 className="text-4xl font-extrabold sm:text-5xl lg:text-7xl">
                {hero.title}
              </h1>
              <p className="mx-auto max-w-3xl text-lg text-gray-200">
                {hero.subtitle}
              </p>
              <div className="flex flex-col gap-4 sm:flex-row">
                <Button
                  asChild
                  className="h-12 px-8 text-base font-semibold shadow-lg shadow-blue-500/30 transition-all hover:scale-105 active:scale-95"
                >
                  <a href="#intake">Get Started</a>
                </Button>
              </div>
            </div>
          </AnimatedSection>
        </div>
      </section>

      {/* Stable anchor div for the About section */}
      <div id="about" className="scroll-mt-20">
        <AnimatedSection className="w-full py-20 lg:py-24">
          <div className="container mx-auto grid max-w-7xl grid-cols-1 items-center gap-12 px-4 sm:px-6 md:grid-cols-3 lg:gap-16 lg:px-8">
            <div className="flex flex-col items-center md:col-span-1">
              {profile?.avatar_url ? (
                <Image
                  src={profile.avatar_url}
                  alt={`Headshot of ${profile.full_name || ""}`}
                  width={160}
                  height={160}
                  className="h-40 w-40 rounded-full object-cover shadow-soft"
                  priority
                />
              ) : (
                <div className="h-40 w-40 rounded-full bg-gray-200 shadow-soft" />
              )}
              <h3 className="mt-6 text-2xl font-bold">
                {profile?.full_name || "Tosin Ikotun"}
              </h3>
              <p className="text-base font-medium text-[var(--primary)]">
                {profile?.role_title || "R.B.A., BCBA., Clinical Director"}
              </p>
            </div>
            <div className="space-y-4 md:col-span-2">
              <h2 className="text-3xl font-bold sm:text-4xl">{about.title}</h2>
              {about.body.map((paragraph, index) => (
                <p key={index} className="text-lg text-[var(--muted)]">
                  {paragraph}
                </p>
              ))}
            </div>
          </div>
        </AnimatedSection>
      </div>

      <AnimatedSection className="w-full py-20 lg:py-24">
        <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold sm:text-4xl">
              {guidingPrinciples.title}
            </h2>
            <p className="mx-auto mt-4 max-w-2xl text-lg text-[var(--muted)]">
              {guidingPrinciples.subtitle}
            </p>
          </div>
          <div className="mt-12 grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {guidingPrinciples.values.map((value) => (
              <div
                key={value.title}
                className="rounded-2xl border border-[var(--border)] bg-[var(--card)] p-6 text-center shadow-soft transition-transform duration-300 hover:-translate-y-1 cursor-default"
              >
                <h3 className="text-xl font-semibold">{value.title}</h3>
                <p className="mt-2 text-base text-[var(--muted)]">
                  {value.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </AnimatedSection>

      {/* Stable anchor div for the Services section */}
      <div id="services" className="scroll-mt-20">
        <AnimatedSection className="w-full py-20 lg:py-24">
          <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div className="mb-12 text-center">
              <h2 className="text-3xl font-bold sm:text-4xl">
                {services.title}
              </h2>
              <p className="mx-auto mt-4 max-w-2xl text-lg text-[var(--muted)]">
                {services.subtitle}
              </p>
            </div>
            <div className="grid grid-cols-1 gap-8 md:grid-cols-2">
              {services.list.map((service) => (
                <div
                  key={service.title}
                  className="rounded-2xl bg-[var(--card)] p-8 shadow-soft"
                >
                  <h3 className="text-2xl font-bold text-[var(--primary)]">
                    {service.title}
                  </h3>
                  <p className="mt-4 text-base text-[var(--muted)]">
                    {service.description}
                  </p>
                </div>
              ))}
            </div>
            <div className="mt-16 text-center">
              <h3 className="text-2xl font-semibold">
                {services.settingsTitle}
              </h3>
              <div className="mt-8 grid grid-cols-2 justify-center gap-8 md:grid-cols-4">
                {services.settings.map((setting) => {
                  const Icon = iconMap[setting.icon];
                  return (
                    <div
                      key={setting.text}
                      className="flex flex-col items-center gap-2"
                    >
                      <Icon className="h-10 w-10 text-[var(--primary)]" />
                      <span className="font-medium">{setting.text}</span>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </AnimatedSection>
      </div>

      {/* This section can keep its ID as it's not a primary nav target */}
      <AnimatedSection
        id="intake"
        className="w-full bg-slate-800 py-20 lg:py-24 scroll-mt-20"
      >
        <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="mb-12 text-center">
            <h2 className="text-3xl font-bold sm:text-4xl text-white">
              {intake.title}
            </h2>
            <p className="mx-auto mt-4 max-w-2xl text-lg text-slate-300">
              {intake.subtitle}
            </p>
          </div>
          <div className="relative mx-auto flex max-w-2xl flex-col gap-12">
            {intake.steps.map((item) => (
              <div key={item.step} className="flex items-start gap-6">
                <div className="flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-[var(--primary)] text-xl font-bold text-white shadow-lg shadow-blue-500/30">
                  {item.step}
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">
                    {item.title}
                  </h3>
                  <p className="mt-1 text-base text-slate-300">
                    {item.description}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </AnimatedSection>

      {/* Stable anchor div for the FAQ section */}
      <div id="faq" className="scroll-mt-20">
        <AnimatedSection className="w-full py-20 lg:py-24">
          <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div className="mb-12 text-center">
              <h2 className="text-3xl font-bold sm:text-4xl">{faq.title}</h2>
            </div>
            <div className="mx-auto max-w-3xl space-y-6">
              {faq.questions.map((faqItem, index) => (
                <div
                  key={index}
                  className="rounded-2xl border border-[var(--border)] bg-[var(--card)] p-6 shadow-soft"
                >
                  <h3 className="text-lg font-semibold">{faqItem.question}</h3>
                  <p className="mt-2 text-base text-[var(--muted)]">
                    {faqItem.answer}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </AnimatedSection>
      </div>

      <AnimatedSection className="w-full bg-slate-800 py-20 lg:py-24">
        <div className="container mx-auto max-w-5xl px-4 sm:px-6 lg:px-8">
          <div className="relative overflow-hidden rounded-2xl bg-slate-900 p-10 text-center shadow-soft sm:p-16">
            <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">
              {cta.title}
            </h2>
            <p className="mx-auto mt-4 max-w-2xl text-lg text-slate-300">
              {cta.subtitle}
            </p>
            <div className="mt-8">
              <Button
                asChild
                size="lg"
                className="h-12 px-8 text-base font-semibold shadow-lg shadow-blue-500/30 transition-all hover:scale-105 active:scale-95"
              >
                <Link href="/contact/intake">Schedule Your Consultation</Link>
              </Button>
            </div>
          </div>
        </div>
      </AnimatedSection>
    </>
  );
}
==== ./src/components/Header.tsx ====
// FILE: src/components/Header.tsx

"use client";

import { Button } from "@/components/ui/button";
import Link from "next/link";
import { useLenis } from "@/context/LenisContext";

export function Header() {
  const lenis = useLenis();

  const handleScrollTo = (targetId: string) => {
    if (lenis) {
      const targetElement = document.querySelector(targetId);
      if (targetElement instanceof HTMLElement) {
        lenis.scrollTo(targetElement, { offset: -80 });
      }
    }
  };

  // New function to handle scrolling to the top of the page
  const handleScrollToTop = () => {
    if (lenis) {
      lenis.scrollTo(0); // 0 signifies the top of the page
    }
  };

  return (
    <header className="sticky top-0 z-50 w-full border-b border-[var(--border)] bg-[var(--background)]/50 backdrop-blur-lg">
      <div className="container mx-auto flex h-16 max-w-7xl items-center justify-between px-4 sm:px-6 lg:px-8">
        {/* The logo is now a button that calls our new function */}
        <button onClick={handleScrollToTop} className="flex items-center">
          <span className="text-xl font-bold text-[var(--primary)]">DBTS</span>
        </button>
        <nav className="hidden items-center space-x-8 text-sm font-medium md:flex">
          <button
            onClick={() => handleScrollTo("#about")}
            className="nav-link text-[var(--foreground)] hover:text-[var(--primary)]"
          >
            About
          </button>
          <button
            onClick={() => handleScrollTo("#services")}
            className="nav-link text-[var(--foreground)] hover:text-[var(--primary)]"
          >
            Services
          </button>
          <button
            onClick={() => handleScrollTo("#faq")}
            className="nav-link text-[var(--foreground)] hover:text-[var(--primary)]"
          >
            FAQ
          </button>
        </nav>
        <Button
          asChild
          className="inline-flex justify-center h-10 items-center text-base font-semibold shadow-lg transition-all hover:scale-105 active:scale-95"
        >
          <Link href="/contact">Contact Us</Link>
        </Button>
      </div>
    </header>
  );
}
==== ./src/components/AnimatedSection.tsx ====
"use client";

import { motion, HTMLMotionProps } from "framer-motion"; // <-- Import HTMLMotionProps
import React from "react";

// --- THIS IS THE CHANGE ---
// We're defining the props by combining framer-motion's props with our own.
// `HTMLMotionProps<'section'>` includes all valid props for a `<motion.section>`,
// including standard HTML attributes like `id` and special motion props.
interface AnimatedSectionProps extends HTMLMotionProps<"section"> {
  children: React.ReactNode;
  className?: string;
}

export function AnimatedSection({
  children,
  className,
  ...props
}: AnimatedSectionProps) {
  return (
    // The rest of the component is the same. The spread props are now fully type-safe.
    <motion.section
      className={className}
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.6, ease: "easeInOut" }}
      {...props}
    >
      {children}
    </motion.section>
  );
}
==== ./src/components/NavLink.tsx ====
// FILE: src/components/NavLink.tsx

import Link from "next/link";
import type { LinkProps } from "next/link";
import type { AnchorHTMLAttributes } from "react";

type NavLinkProps = LinkProps & AnchorHTMLAttributes<HTMLAnchorElement>;

export function NavLink(props: NavLinkProps) {
  // This component now simply passes all props through to the underlying
  // Next.js Link component, allowing the browser to handle scrolling.
  return <Link {...props} />;
}
==== ./src/context/LenisContext.tsx ====
// FILE: src/context/LenisContext.tsx

"use client";

import { createContext, useContext, useEffect, useState } from "react";
import Lenis from "@studio-freight/lenis";

const LenisContext = createContext<Lenis | null>(null);

export const useLenis = () => {
  return useContext(LenisContext);
};

export const LenisProvider = ({ children }: { children: React.ReactNode }) => {
  const [lenis, setLenis] = useState<Lenis | null>(null);

  useEffect(() => {
    const newLenisInstance = new Lenis({
      lerp: 0.1,
    });

    setLenis(newLenisInstance);

    const animate = (time: number) => {
      newLenisInstance.raf(time);
      requestAnimationFrame(animate);
    };

    const rafId = requestAnimationFrame(animate);

    return () => {
      cancelAnimationFrame(rafId);
      newLenisInstance.destroy();
      setLenis(null);
    };
  }, []);

  return (
    <LenisContext.Provider value={lenis}>{children}</LenisContext.Provider>
  );
};
==== ./.gitignore ====
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
==== ./package.json ====
{
  "name": "dbts-landing-page",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@studio-freight/lenis": "^1.0.42",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.52.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.23.6",
    "lucide-react": "^0.525.0",
    "next": "^14.2.5",
    "next-themes": "^0.4.6",
    "react": "^18",
    "react-day-picker": "^9.8.0",
    "react-dom": "^18",
    "sonner": "^2.0.6",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@typescript-eslint/eslint-plugin": "^8.38.0",
    "@typescript-eslint/parser": "^8.38.0",
    "eslint": "^8",
    "eslint-config-next": "^14.2.5",
    "supabase": "^2.31.8",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.5",
    "typescript": "^5"
  }
}
==== ./.env.local ====
# ./.env.local

NEXT_PUBLIC_SUPABASE_URL=https://idmsergkxsuvxvvjoibb.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlkbXNlcmdreHN1dnh2dmpvaWJiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwOTQwOTgsImV4cCI6MjA2ODY3MDA5OH0.IMH7led9d9Q6dyYmka7kPyezlNqh5opClWtd1esOov0

DEV_EMAIL_ADDRESS=dayspring.behavioural.dev@gmail.com
DEV_ACCOUNT_PASSWORD=iL0VEdayspringbehavioural!==== ./README.md ====
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
==== ./lib/utils.ts ====
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
==== ./tsconfig.json ====
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
==== ./tailwind.config.ts ====
import type { Config } from "tailwindcss";

const config = {
  content: [
    // Correct paths pointing inside the 'src' directory
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        sans: ["var(--font-sans)"],
      },
      boxShadow: {
        soft: "0 4px 30px rgba(0, 0, 0, 0.1)",
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;
==== ./postcss.config.mjs ====
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
==== ./components.json ====
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}==== ./next.config.js ====
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "randomuser.me",
        port: "",
        pathname: "/api/portraits/**",
      },
      // Add this new block for Unsplash images
      {
        protocol: "https",
        hostname: "images.unsplash.com",
      },
    ],
  },
};

module.exports = nextConfig;
==== ./next-env.d.ts ====
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
==== ./eslint.config.mjs ====
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
